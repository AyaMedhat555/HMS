// <auto-generated />
using System;
using Domain.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("AppointmentCharge")
                        .HasColumnType("real");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AppointmentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Domain.Models.Bed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Beds");
                });

            modelBuilder.Entity("Domain.Models.ClinicPatientRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("OralMedicalHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("ClinicPatients");
                });

            modelBuilder.Entity("Domain.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Department_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("Domain.Models.IndoorPatientRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CauseOfAdmission")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DischargeDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Disharged")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EnterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OralMedicalHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderdByDoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Recommendation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("OrderdByDoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RoomId");

                    b.ToTable("IndoorPatients");
                });


            modelBuilder.Entity("Domain.Models.Labs.LabRequest", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                b.Property<DateTime>("CreatedDtm")
                    .HasColumnType("datetime2");

                b.Property<int>("DoctorId")
                    .HasColumnType("int");

                b.Property<int>("PatientId")
                    .HasColumnType("int");

                b.Property<int>("TestId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("DoctorId");

                b.HasIndex("PatientId");

                b.HasIndex("TestId");

                b.ToTable("LabRequests");
            });

            modelBuilder.Entity("Domain.Models.Labs.PatientScan", b =>
                {
                    b.Property<int>("PatientScanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientScanId"), 1L, 1);

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScanDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ScanId")
                        .HasColumnType("int");

                    b.Property<string>("WrittenReport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientScanId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ScanId");

                    b.ToTable("PatientScans");
                });

            modelBuilder.Entity("Domain.Models.Labs.Scan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("ScanCharge")
                        .HasColumnType("real");

                    b.Property<string>("ScanName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Scan");
                });

            modelBuilder.Entity("Domain.Models.Labs.ScanRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("ScanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ScanId");

                    b.ToTable("ScanRequests");
                });

            modelBuilder.Entity("Domain.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int>("NurseId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("NurseId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Domain.Models.Prescription", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionId"), 1L, 1);

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Prescription_Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("re_appointement_date")
                        .HasColumnType("datetime2");

                    b.HasKey("PrescriptionId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("PatientId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("Domain.Models.PrescriptionItem", b =>
                {
                    b.Property<int>("PrescriptionItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionItemId"), 1L, 1);

                    b.Property<string>("Dose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Durarion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicineType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medicine_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medicine_concentration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrescriptionId")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionItemId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PrescriptionItems");
                });

            modelBuilder.Entity("Domain.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfBeds")
                        .HasColumnType("int");

                    b.Property<bool>("Reserved")
                        .HasColumnType("bit");

                    b.Property<int>("RoomCharges")
                        .HasColumnType("int");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.Property<string>("RoomType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Domain.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DayOfWork")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("TimePerPatient")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Domain.Models.TimeSlot", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("Dayofwork")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("Reserved")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("slot_time")
                        .HasColumnType("time");

                    b.Property<int>("slotnumber")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("DoctorId");

                    b.ToTable("TimeSlots");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("Role").HasValue("User");
                });

            modelBuilder.Entity("Domain.Models.VitalSign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("ECG")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.Property<int>("NurseId")
                        .HasColumnType("int");

                    b.Property<int>("Patientid")
                        .HasColumnType("int");

                    b.Property<string>("Pressure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PulseRate")
                        .HasColumnType("int");

                    b.Property<float>("RespirationRate")
                        .HasColumnType("real");

                    b.Property<float>("Temperature")
                        .HasColumnType("real");

                    b.Property<DateTime>("vitals_date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("NoteId");

                    b.HasIndex("NurseId");

                    b.HasIndex("Patientid");

                    b.ToTable("VitalSigns");
                });

            modelBuilder.Entity("SmartHospital.Models.Labs.PatientTest", b =>
                {
                    b.Property<int>("PatientTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientTestId"), 1L, 1);

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("PatientTestId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TestId");

                    b.ToTable("PatientTest");
                });

            modelBuilder.Entity("SmartHospital.Models.Labs.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TestCharge")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("SmartHospital.Models.Labs.TestDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("TestParameterId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TestParameterId");

                    b.ToTable("TestDetails", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("TestDetails");
                });

            modelBuilder.Entity("SmartHospital.Models.Labs.TestParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FieldType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InputPattern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestParameterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TestParameters", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("TestParameter");
                });

            modelBuilder.Entity("Domain.Models.Admin", b =>
                {
                    b.HasBaseType("Domain.Models.User");

                    b.HasIndex("DepartmentId");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("Domain.Models.Doctor", b =>
                {
                    b.HasBaseType("Domain.Models.User");

                    b.Property<string>("DocDegree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocSpecialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int")
                        .HasColumnName("Doctor_IndoorPatientRecordId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasDiscriminator().HasValue("Doctor");
                });

            modelBuilder.Entity("Domain.Models.Nurse", b =>
                {
                    b.HasBaseType("Domain.Models.User");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<string>("NurseSpecialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NurseDegree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasDiscriminator().HasValue("Nurse");
                });

            modelBuilder.Entity("Domain.Models.Patient", b =>
                {
                    b.HasBaseType("Domain.Models.User");

                    b.HasIndex("DepartmentId");

                    b.HasDiscriminator().HasValue("Patient");
                });

            modelBuilder.Entity("Domain.Models.Receptionist", b =>
                {
                    b.HasBaseType("Domain.Models.User");

                    b.HasIndex("DepartmentId");

                    b.HasDiscriminator().HasValue("Receptionist");
                });

            modelBuilder.Entity("SmartHospital.Models.Labs.TestDetailsCategorical", b =>
                {
                    b.HasBaseType("SmartHospital.Models.Labs.TestDetails");

                    b.Property<string>("MeasuredValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientTestId")
                        .HasColumnType("int");

                    b.HasIndex("PatientTestId");

                    b.HasDiscriminator().HasValue("Categorical");
                });

            modelBuilder.Entity("SmartHospital.Models.Labs.TestDetailsNumerical", b =>
                {
                    b.HasBaseType("SmartHospital.Models.Labs.TestDetails");

                    b.Property<float>("MeasuredValue")
                        .HasColumnType("real")
                        .HasColumnName("TestDetailsNumerical_MeasuredValue");

                    b.Property<int?>("PatientTestId")
                        .HasColumnType("int")
                        .HasColumnName("TestDetailsNumerical_PatientTestId");

                    b.HasIndex("PatientTestId");

                    b.HasDiscriminator().HasValue("Numerical");
                });

            modelBuilder.Entity("SmartHospital.Models.Labs.TestParameterCategorical", b =>
                {
                    b.HasBaseType("SmartHospital.Models.Labs.TestParameter");

                    b.Property<string>("Normalvalue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TestId")
                        .HasColumnType("int");

                    b.HasIndex("TestId");

                    b.HasDiscriminator().HasValue("Categorical");
                });

            modelBuilder.Entity("SmartHospital.Models.Labs.TestParameterNumerical", b =>
                {
                    b.HasBaseType("SmartHospital.Models.Labs.TestParameter");

                    b.Property<float>("Max_Range")
                        .HasColumnType("real");

                    b.Property<float>("Min_Range")
                        .HasColumnType("real");

                    b.Property<int?>("TestId")
                        .HasColumnType("int")
                        .HasColumnName("TestParameterNumerical_TestId");

                    b.HasIndex("TestId");

                    b.HasDiscriminator().HasValue("Numerical");
                });

            modelBuilder.Entity("Domain.Models.Appointment", b =>
                {
                    b.HasOne("Domain.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Models.Bed", b =>
                {
                    b.HasOne("Domain.Models.Room", "Room")
                        .WithMany("Beds")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Domain.Models.ClinicPatientRecord", b =>
                {
                    b.HasOne("Domain.Models.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Patient", null)
                        .WithMany("ClinicPatientRecord")
                        .HasForeignKey("PatientId");

                    b.HasOne("Domain.Models.Prescription", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Department");

                    b.Navigation("Doctor");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("Domain.Models.IndoorPatientRecord", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Doctor", "OrderdByDoctor")
                        .WithMany()
                        .HasForeignKey("OrderdByDoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Patient", "Patient")
                        .WithMany("IndoorPatientRecord")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("OrderdByDoctor");

                    b.Navigation("Patient");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Domain.Models.Labs.LabRequest", b =>
                {
                    b.HasOne("Domain.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Domain.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHospital.Models.Labs.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Domain.Models.Labs.PatientScan", b =>
                {
                    b.HasOne("Domain.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", null)
                        .WithMany("Scans")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Labs.Scan", "Scan")
                        .WithMany()
                        .HasForeignKey("ScanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Scan");
                });

            modelBuilder.Entity("Domain.Models.Labs.ScanRequest", b =>
                {
                    b.HasOne("Domain.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Domain.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Labs.Scan", "Scan")
                        .WithMany()
                        .HasForeignKey("ScanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Scan");
                });

            modelBuilder.Entity("Domain.Models.Note", b =>
                {
                    b.HasOne("Domain.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.IndoorPatientRecord", null)
                        .WithMany("Notes")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("Domain.Models.Prescription", b =>
                {
                    b.HasOne("Domain.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.IndoorPatientRecord", null)
                        .WithMany("Prescriptions")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Patient", "patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("patient");
                });

            modelBuilder.Entity("Domain.Models.PrescriptionItem", b =>
                {
                    b.HasOne("Domain.Models.Prescription", null)
                        .WithMany("PrescriptionItems")
                        .HasForeignKey("PrescriptionId");
                });

            modelBuilder.Entity("Domain.Models.Room", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.Schedule", b =>
                {
                    b.HasOne("Domain.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Domain.Models.TimeSlot", b =>
                {
                    b.HasOne("Domain.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Domain.Models.VitalSign", b =>
                {
                    b.HasOne("Domain.Models.IndoorPatientRecord", null)
                        .WithMany("VitalSigns")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Note", "Note")
                        .WithMany()
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("Patientid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");

                    b.Navigation("Nurse");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartHospital.Models.Labs.PatientTest", b =>
                {
                    b.HasOne("Domain.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", null)
                        .WithMany("Tests")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHospital.Models.Labs.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("SmartHospital.Models.Labs.TestDetails", b =>
                {
                    b.HasOne("SmartHospital.Models.Labs.TestParameter", "TestParameter")
                        .WithMany()
                        .HasForeignKey("TestParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestParameter");
                });

            modelBuilder.Entity("Domain.Models.Admin", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.Doctor", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany("Doctors")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", null)
                        .WithMany("Doctors")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.Nurse", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany("Nurses")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", null)
                        .WithMany("Nurses")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.Patient", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany("Patients")
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.Receptionist", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("SmartHospital.Models.Labs.TestDetailsCategorical", b =>
                {
                    b.HasOne("SmartHospital.Models.Labs.PatientTest", "PatientTest")
                        .WithMany("CategoricalDetails")
                        .HasForeignKey("PatientTestId");

                    b.Navigation("PatientTest");
                });

            modelBuilder.Entity("SmartHospital.Models.Labs.TestDetailsNumerical", b =>
                {
                    b.HasOne("SmartHospital.Models.Labs.PatientTest", "PatientTest")
                        .WithMany("NumericalDetails")
                        .HasForeignKey("PatientTestId");

                    b.Navigation("PatientTest");
                });

            modelBuilder.Entity("SmartHospital.Models.Labs.TestParameterCategorical", b =>
                {
                    b.HasOne("SmartHospital.Models.Labs.Test", "Test")
                        .WithMany("CategoricalParamters")
                        .HasForeignKey("TestId");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("SmartHospital.Models.Labs.TestParameterNumerical", b =>
                {
                    b.HasOne("SmartHospital.Models.Labs.Test", "Test")
                        .WithMany("NumericalParamters")
                        .HasForeignKey("TestId");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Domain.Models.IndoorPatientRecord", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Notes");

                    b.Navigation("Nurses");

                    b.Navigation("Prescriptions");

                    b.Navigation("Scans");

                    b.Navigation("Tests");

                    b.Navigation("VitalSigns");
                });

            modelBuilder.Entity("Domain.Models.Department", b =>
            {
                b.Navigation("Doctors");

                b.Navigation("Nurses");

                b.Navigation("Patients");
            });

            modelBuilder.Entity("Domain.Models.Prescription", b =>
                {
                    b.Navigation("PrescriptionItems");
                });

            modelBuilder.Entity("Domain.Models.Room", b =>
                {
                    b.Navigation("Beds");
                });

            modelBuilder.Entity("SmartHospital.Models.Labs.PatientTest", b =>
                {
                    b.Navigation("CategoricalDetails");

                    b.Navigation("NumericalDetails");
                });

            modelBuilder.Entity("SmartHospital.Models.Labs.Test", b =>
                {
                    b.Navigation("CategoricalParamters");

                    b.Navigation("NumericalParamters");
                });

            modelBuilder.Entity("Domain.Models.Patient", b =>
                {
                    b.Navigation("ClinicPatientRecord");

                    b.Navigation("IndoorPatientRecord");
                });
#pragma warning restore 612, 618
        }
    }
}
