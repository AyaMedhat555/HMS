// <auto-generated />
using System;
using Domain.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220629164548_images")]
    partial class images
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("AppointmentCharge")
                        .HasColumnType("real");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AppointmentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("Examined")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Domain.Models.Bed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<bool>("Reserved")
                        .HasColumnType("bit");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Beds");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Number = 1,
                            Reserved = false,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 2,
                            Number = 2,
                            Reserved = false,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 3,
                            Number = 3,
                            Reserved = false,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 4,
                            Number = 4,
                            Reserved = false,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 5,
                            Number = 1,
                            Reserved = false,
                            RoomId = 2
                        },
                        new
                        {
                            Id = 6,
                            Number = 2,
                            Reserved = false,
                            RoomId = 2
                        },
                        new
                        {
                            Id = 7,
                            Number = 1,
                            Reserved = false,
                            RoomId = 3
                        },
                        new
                        {
                            Id = 8,
                            Number = 1,
                            Reserved = false,
                            RoomId = 4
                        },
                        new
                        {
                            Id = 9,
                            Number = 2,
                            Reserved = false,
                            RoomId = 4
                        },
                        new
                        {
                            Id = 10,
                            Number = 3,
                            Reserved = false,
                            RoomId = 4
                        },
                        new
                        {
                            Id = 11,
                            Number = 4,
                            Reserved = false,
                            RoomId = 4
                        },
                        new
                        {
                            Id = 12,
                            Number = 1,
                            Reserved = false,
                            RoomId = 5
                        },
                        new
                        {
                            Id = 13,
                            Number = 2,
                            Reserved = false,
                            RoomId = 5
                        },
                        new
                        {
                            Id = 14,
                            Number = 3,
                            Reserved = false,
                            RoomId = 5
                        },
                        new
                        {
                            Id = 15,
                            Number = 4,
                            Reserved = false,
                            RoomId = 5
                        },
                        new
                        {
                            Id = 16,
                            Number = 1,
                            Reserved = false,
                            RoomId = 6
                        },
                        new
                        {
                            Id = 17,
                            Number = 2,
                            Reserved = false,
                            RoomId = 6
                        },
                        new
                        {
                            Id = 18,
                            Number = 3,
                            Reserved = false,
                            RoomId = 6
                        },
                        new
                        {
                            Id = 19,
                            Number = 4,
                            Reserved = false,
                            RoomId = 6
                        },
                        new
                        {
                            Id = 20,
                            Number = 1,
                            Reserved = false,
                            RoomId = 7
                        },
                        new
                        {
                            Id = 21,
                            Number = 1,
                            Reserved = false,
                            RoomId = 8
                        },
                        new
                        {
                            Id = 22,
                            Number = 2,
                            Reserved = false,
                            RoomId = 8
                        });
                });

            modelBuilder.Entity("Domain.Models.ClinicPatientRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("OralMedicalHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("ClinicPatients");
                });

            modelBuilder.Entity("Domain.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Department_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("clinicalDepartment")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Department_Name = "paediatrics",
                            IsActive = true,
                            Location = "first floor",
                            clinicalDepartment = false
                        },
                        new
                        {
                            Id = 2,
                            Department_Name = "gynaecology",
                            IsActive = true,
                            Location = "first floor",
                            clinicalDepartment = false
                        },
                        new
                        {
                            Id = 3,
                            Department_Name = "eye",
                            IsActive = false,
                            Location = "second floor",
                            clinicalDepartment = false
                        },
                        new
                        {
                            Id = 4,
                            Department_Name = "orthopaedics",
                            IsActive = true,
                            Location = "third floor",
                            clinicalDepartment = false
                        },
                        new
                        {
                            Id = 5,
                            Department_Name = "neurology",
                            IsActive = true,
                            Location = "second floor",
                            clinicalDepartment = false
                        },
                        new
                        {
                            Id = 6,
                            Department_Name = "cardiology",
                            IsActive = true,
                            Location = "fourth floor",
                            clinicalDepartment = false
                        },
                        new
                        {
                            Id = 7,
                            Department_Name = "dental",
                            IsActive = false,
                            Location = "fourth floor",
                            clinicalDepartment = false
                        },
                        new
                        {
                            Id = 8,
                            Department_Name = "ENT",
                            IsActive = true,
                            Location = "third floor",
                            clinicalDepartment = false
                        },
                        new
                        {
                            Id = 9,
                            Department_Name = "Labs",
                            IsActive = true,
                            Location = "third floor",
                            clinicalDepartment = false
                        },
                        new
                        {
                            Id = 10,
                            Department_Name = "Scan",
                            IsActive = true,
                            Location = "third floor",
                            clinicalDepartment = false
                        });
                });

            modelBuilder.Entity("Domain.Models.IndoorPatientRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BedId")
                        .HasColumnType("int");

                    b.Property<string>("CauseOfAdmission")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DischargeDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Disharged")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EnterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OralMedicalHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderdByDoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Recommendation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BedId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("OrderdByDoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RoomId");

                    b.ToTable("IndoorPatients");
                });

            modelBuilder.Entity("Domain.Models.Labs.LabRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TestId");

                    b.ToTable("LabRequests");
                });

            modelBuilder.Entity("Domain.Models.Labs.PatientScan", b =>
                {
                    b.Property<int>("PatientScanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientScanId"), 1L, 1);

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScanDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ScanId")
                        .HasColumnType("int");

                    b.Property<string>("WrittenReport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientScanId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ScanId");

                    b.ToTable("PatientScans");
                });

            modelBuilder.Entity("Domain.Models.Labs.PatientTest", b =>
                {
                    b.Property<int>("PatientTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientTestId"), 1L, 1);

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("PatientTestId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TestId");

                    b.ToTable("PatientTest");
                });

            modelBuilder.Entity("Domain.Models.Labs.Scan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("ScanCharge")
                        .HasColumnType("real");

                    b.Property<string>("ScanName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Scan");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ScanCharge = 100f,
                            ScanName = "Angiography"
                        },
                        new
                        {
                            Id = 2,
                            ScanCharge = 100f,
                            ScanName = "CT"
                        },
                        new
                        {
                            Id = 3,
                            ScanCharge = 100f,
                            ScanName = "Echocardiogram"
                        },
                        new
                        {
                            Id = 4,
                            ScanCharge = 100f,
                            ScanName = "Electrocardiogram (ECG)"
                        },
                        new
                        {
                            Id = 5,
                            ScanCharge = 100f,
                            ScanName = "MRI scan"
                        },
                        new
                        {
                            Id = 6,
                            ScanCharge = 100f,
                            ScanName = "PET scan"
                        },
                        new
                        {
                            Id = 7,
                            ScanCharge = 100f,
                            ScanName = "Ultrasound scan"
                        },
                        new
                        {
                            Id = 8,
                            ScanCharge = 100f,
                            ScanName = "X-ray"
                        });
                });

            modelBuilder.Entity("Domain.Models.Labs.ScanImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientScanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientScanId");

                    b.ToTable("ScanImages");
                });

            modelBuilder.Entity("Domain.Models.Labs.ScanRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("ScanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ScanId");

                    b.ToTable("ScanRequests");
                });

            modelBuilder.Entity("Domain.Models.Labs.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TestCharge")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Tests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CBC",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 2,
                            Name = "ESR",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 3,
                            Name = "LIVER FUNCTION TEST",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 4,
                            Name = "Kidney function test",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 5,
                            Name = "Cholesterol test",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 6,
                            Name = "pituitary gland test",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 7,
                            Name = "H.pylori test",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 8,
                            Name = "thyroid gland report",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 9,
                            Name = "STOOL TEST",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 10,
                            Name = "urine report",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 11,
                            Name = "Pcr",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 12,
                            Name = "Diabetes test",
                            TestCharge = 100f
                        });
                });

            modelBuilder.Entity("Domain.Models.Labs.TestDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PatientTestId")
                        .HasColumnType("int");

                    b.Property<int>("TestParameterId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TestParameterId");

                    b.ToTable("TestDetails", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("TestDetails");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FieldType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InputPattern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<string>("TestParameterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TestParameters", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("TestParameter");
                });

            modelBuilder.Entity("Domain.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int?>("NurseId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("NurseId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Domain.Models.Prescription", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionId"), 1L, 1);

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Prescription_Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("re_appointement_date")
                        .HasColumnType("datetime2");

                    b.HasKey("PrescriptionId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("PatientId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("Domain.Models.PrescriptionItem", b =>
                {
                    b.Property<int>("PrescriptionItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionItemId"), 1L, 1);

                    b.Property<string>("Dose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Durarion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicineType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medicine_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medicine_concentration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrescriptionId")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionItemId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PrescriptionItems");
                });

            modelBuilder.Entity("Domain.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfBeds")
                        .HasColumnType("int");

                    b.Property<bool>("Reserved")
                        .HasColumnType("bit");

                    b.Property<int>("RoomCharges")
                        .HasColumnType("int");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.Property<string>("RoomType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentId = 1,
                            FloorNumber = 1,
                            NumberOfBeds = 4,
                            Reserved = false,
                            RoomCharges = 120,
                            RoomNumber = 1,
                            RoomType = "common"
                        },
                        new
                        {
                            Id = 2,
                            DepartmentId = 1,
                            FloorNumber = 1,
                            NumberOfBeds = 2,
                            Reserved = false,
                            RoomCharges = 140,
                            RoomNumber = 2,
                            RoomType = "common"
                        },
                        new
                        {
                            Id = 3,
                            DepartmentId = 1,
                            FloorNumber = 1,
                            NumberOfBeds = 1,
                            Reserved = false,
                            RoomCharges = 200,
                            RoomNumber = 3,
                            RoomType = "suite"
                        },
                        new
                        {
                            Id = 4,
                            DepartmentId = 1,
                            FloorNumber = 2,
                            NumberOfBeds = 4,
                            Reserved = false,
                            RoomCharges = 120,
                            RoomNumber = 4,
                            RoomType = "common"
                        },
                        new
                        {
                            Id = 5,
                            DepartmentId = 2,
                            FloorNumber = 2,
                            NumberOfBeds = 4,
                            Reserved = false,
                            RoomCharges = 120,
                            RoomNumber = 5,
                            RoomType = "common"
                        },
                        new
                        {
                            Id = 6,
                            DepartmentId = 2,
                            FloorNumber = 2,
                            NumberOfBeds = 4,
                            Reserved = false,
                            RoomCharges = 120,
                            RoomNumber = 6,
                            RoomType = "common"
                        },
                        new
                        {
                            Id = 7,
                            DepartmentId = 2,
                            FloorNumber = 3,
                            NumberOfBeds = 1,
                            Reserved = false,
                            RoomCharges = 200,
                            RoomNumber = 7,
                            RoomType = "suite"
                        },
                        new
                        {
                            Id = 8,
                            DepartmentId = 1,
                            FloorNumber = 3,
                            NumberOfBeds = 2,
                            Reserved = false,
                            RoomCharges = 140,
                            RoomNumber = 8,
                            RoomType = "common"
                        });
                });

            modelBuilder.Entity("Domain.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DayOfWork")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("TimePerPatient")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Domain.Models.TimeSlot", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("Dayofwork")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("Reserved")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("slot_time")
                        .HasColumnType("time");

                    b.Property<int>("slotnumber")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("DoctorId");

                    b.ToTable("TimeSlots");
                });

            modelBuilder.Entity("Domain.Models.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("BloodType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("Role").HasValue("User");
                });

            modelBuilder.Entity("Domain.Models.VitalSign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("ECG")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.Property<int>("NurseId")
                        .HasColumnType("int");

                    b.Property<int>("Patientid")
                        .HasColumnType("int");

                    b.Property<string>("Pressure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PulseRate")
                        .HasColumnType("int");

                    b.Property<float>("RespirationRate")
                        .HasColumnType("real");

                    b.Property<float>("Temperature")
                        .HasColumnType("real");

                    b.Property<DateTime>("vitals_date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("NoteId");

                    b.HasIndex("NurseId");

                    b.HasIndex("Patientid");

                    b.ToTable("VitalSigns");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestDetailsCategorical", b =>
                {
                    b.HasBaseType("Domain.Models.Labs.TestDetails");

                    b.Property<string>("MeasuredValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("PatientTestId");

                    b.HasDiscriminator().HasValue("Categorical");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestDetailsNumerical", b =>
                {
                    b.HasBaseType("Domain.Models.Labs.TestDetails");

                    b.Property<float>("MeasuredValue")
                        .HasColumnType("real")
                        .HasColumnName("TestDetailsNumerical_MeasuredValue");

                    b.HasIndex("PatientTestId");

                    b.HasDiscriminator().HasValue("Numerical");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestParameterCategorical", b =>
                {
                    b.HasBaseType("Domain.Models.Labs.TestParameter");

                    b.Property<string>("Normalvalue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("TestId");

                    b.HasDiscriminator().HasValue("Categorical");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestParameterNumerical", b =>
                {
                    b.HasBaseType("Domain.Models.Labs.TestParameter");

                    b.Property<float>("Max_Range")
                        .HasColumnType("real");

                    b.Property<float>("Min_Range")
                        .HasColumnType("real");

                    b.HasIndex("TestId");

                    b.HasDiscriminator().HasValue("Numerical");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "Heamoglobin(edta blood)",
                            Unit = "g/dl",
                            Max_Range = 15.5f,
                            Min_Range = 11.5f
                        },
                        new
                        {
                            Id = 2,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "Haematocrit(pcv)",
                            Unit = "%",
                            Max_Range = 45f,
                            Min_Range = 36f
                        },
                        new
                        {
                            Id = 3,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "RBCs count(EDTA Blood)",
                            Unit = "Millions/cmm",
                            Max_Range = 5.2f,
                            Min_Range = 4f
                        },
                        new
                        {
                            Id = 4,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "mcv",
                            Unit = "Fl",
                            Max_Range = 100f,
                            Min_Range = 80f
                        },
                        new
                        {
                            Id = 5,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "mch",
                            Unit = "Pg",
                            Max_Range = 33f,
                            Min_Range = 27f
                        },
                        new
                        {
                            Id = 6,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "mchc",
                            Unit = "g/dl",
                            Max_Range = 37f,
                            Min_Range = 31f
                        },
                        new
                        {
                            Id = 7,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "Rdw-cv",
                            Unit = "%",
                            Max_Range = 15f,
                            Min_Range = 11.5f
                        },
                        new
                        {
                            Id = 8,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "Platelet count (edta blood)",
                            Unit = "Thousands/cmm",
                            Max_Range = 450f,
                            Min_Range = 150f
                        },
                        new
                        {
                            Id = 9,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "Total leucocytic count (edta blood)",
                            Unit = "Thousands/cmm",
                            Max_Range = 11f,
                            Min_Range = 4f
                        },
                        new
                        {
                            Id = 10,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "neutrophis",
                            Unit = "×10^9/l",
                            Max_Range = 7f,
                            Min_Range = 2f
                        },
                        new
                        {
                            Id = 11,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "lymphocytes",
                            Unit = "×10^9/l",
                            Max_Range = 4.8f,
                            Min_Range = 1f
                        },
                        new
                        {
                            Id = 12,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "monocytes",
                            Unit = "×10^9/l",
                            Max_Range = 1f,
                            Min_Range = 0.2f
                        },
                        new
                        {
                            Id = 13,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "eosinophils",
                            Unit = "×10^9/l",
                            Max_Range = 0.45f,
                            Min_Range = 0.1f
                        },
                        new
                        {
                            Id = 14,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "basophils",
                            Unit = "×10^9/l",
                            Max_Range = 0.1f,
                            Min_Range = 0f
                        },
                        new
                        {
                            Id = 15,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 2,
                            TestParameterName = "First hour male",
                            Unit = "mm",
                            Max_Range = 7f,
                            Min_Range = 3f
                        },
                        new
                        {
                            Id = 16,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 2,
                            TestParameterName = "First hour female",
                            Unit = "mm",
                            Max_Range = 12f,
                            Min_Range = 7f
                        },
                        new
                        {
                            Id = 17,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 2,
                            TestParameterName = "Second hour male",
                            Unit = "mm",
                            Max_Range = 15f,
                            Min_Range = 7f
                        },
                        new
                        {
                            Id = 18,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 2,
                            TestParameterName = "Second hour female",
                            Unit = "mm",
                            Max_Range = 17f,
                            Min_Range = 12f
                        },
                        new
                        {
                            Id = 19,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Bilirubin total",
                            Unit = "mg/dl",
                            Max_Range = 1f,
                            Min_Range = 0f
                        },
                        new
                        {
                            Id = 20,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Bilirubin direct",
                            Unit = "mg/dl",
                            Max_Range = 0.3f,
                            Min_Range = 0f
                        },
                        new
                        {
                            Id = 21,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Bilirubin indirect",
                            Unit = "mg/dl",
                            Max_Range = 11.7f,
                            Min_Range = 0f
                        },
                        new
                        {
                            Id = 22,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Sgot(ast)",
                            Unit = "u/i",
                            Max_Range = 0.35f,
                            Min_Range = 0f
                        },
                        new
                        {
                            Id = 23,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Sgpt(alt)",
                            Unit = "u/i",
                            Max_Range = 0.45f,
                            Min_Range = 0f
                        },
                        new
                        {
                            Id = 24,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Alkaline phosphatase",
                            Unit = "u/i",
                            Max_Range = 341f,
                            Min_Range = 124f
                        },
                        new
                        {
                            Id = 25,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Total proten",
                            Unit = "mg/dl",
                            Max_Range = 8.3f,
                            Min_Range = 6.6f
                        },
                        new
                        {
                            Id = 26,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Albumin",
                            Unit = "g/dl",
                            Max_Range = 4.9f,
                            Min_Range = 3.5f
                        },
                        new
                        {
                            Id = 27,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Globulin",
                            Unit = "g/dl",
                            Max_Range = 3.5f,
                            Min_Range = 2.3f
                        },
                        new
                        {
                            Id = 28,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "a/g ration",
                            Unit = "g/dl",
                            Max_Range = 1.56f,
                            Min_Range = 1.25f
                        },
                        new
                        {
                            Id = 29,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Blood urea nitrogen(BUN)",
                            Unit = "mg/dl",
                            Max_Range = 25f,
                            Min_Range = 5f
                        },
                        new
                        {
                            Id = 30,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Creatinine(CRE)",
                            Unit = "mg/dl",
                            Max_Range = 1.4f,
                            Min_Range = 0.3f
                        },
                        new
                        {
                            Id = 31,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Uric acid(UA)",
                            Unit = "mg/dl",
                            Max_Range = 7f,
                            Min_Range = 2.5f
                        },
                        new
                        {
                            Id = 32,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Albumin-globilin in ratio(A/G ratio)",
                            Unit = "mg/dl",
                            Max_Range = 1.8f,
                            Min_Range = 1f
                        },
                        new
                        {
                            Id = 33,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "creatinine Clearance/24 hrs urine (CC) Male",
                            Unit = "ml/min",
                            Max_Range = 135f,
                            Min_Range = 71f
                        },
                        new
                        {
                            Id = 34,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "creatinine Clearance/24 hrs urine (CC) Female",
                            Unit = "ml/min",
                            Max_Range = 116f,
                            Min_Range = 78f
                        },
                        new
                        {
                            Id = 35,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Renin",
                            Unit = "pg/ml/hr",
                            Max_Range = 3.95f,
                            Min_Range = 0.15f
                        },
                        new
                        {
                            Id = 36,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Creatinine urine",
                            Unit = "mg/dl",
                            Max_Range = 250f,
                            Min_Range = 60f
                        },
                        new
                        {
                            Id = 37,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Natrium(Na)",
                            Unit = "meq/l",
                            Max_Range = 145f,
                            Min_Range = 135f
                        },
                        new
                        {
                            Id = 38,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Potassium (K)",
                            Unit = "meq/l",
                            Max_Range = 4.5f,
                            Min_Range = 3.4f
                        },
                        new
                        {
                            Id = 39,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Calcium (Ca)",
                            Unit = "mg/dl",
                            Max_Range = 10.6f,
                            Min_Range = 8.4f
                        },
                        new
                        {
                            Id = 40,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Phosphorus (IP)",
                            Unit = "mg/dl",
                            Max_Range = 4.7f,
                            Min_Range = 2.1f
                        },
                        new
                        {
                            Id = 41,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Alkaline phosphatase (ALP)",
                            Unit = "U/L",
                            Max_Range = 110f,
                            Min_Range = 27f
                        });
                });

            modelBuilder.Entity("Domain.Models.Users.Admin", b =>
                {
                    b.HasBaseType("Domain.Models.Users.User");

                    b.HasIndex("DepartmentId");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("Domain.Models.Users.Doctor", b =>
                {
                    b.HasBaseType("Domain.Models.Users.User");

                    b.Property<string>("DocDegree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocSpecialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int")
                        .HasColumnName("Doctor_IndoorPatientRecordId");

                    b.Property<bool>("clinicalDoctor")
                        .HasColumnType("bit");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasDiscriminator().HasValue("Doctor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "fayoum",
                            Age = 40,
                            BloodType = "B+",
                            CreatedDtm = new DateTime(2022, 6, 29, 18, 45, 44, 996, DateTimeKind.Local).AddTicks(5129),
                            DepartmentId = 1,
                            FirstName = "Sayed",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "Taha",
                            Mail = "sayed.taha@gmail.com",
                            NationalId = "27030351876321",
                            PasswordHash = new byte[] { 121, 43, 143, 146, 53, 238, 163, 118, 73, 39, 42, 224, 153, 120, 12, 130, 223, 102, 44, 217, 108, 202, 63, 248, 161, 169, 128, 152, 59, 254, 48, 227, 102, 241, 56, 12, 154, 79, 189, 173, 104, 3, 241, 213, 123, 5, 219, 207, 235, 200, 88, 139, 39, 95, 1, 161, 156, 33, 124, 171, 224, 155, 220, 64 },
                            PasswordSalt = new byte[] { 239, 183, 73, 179, 71, 211, 163, 17, 74, 207, 182, 45, 208, 249, 138, 196, 76, 22, 122, 147, 244, 86, 177, 225, 26, 2, 126, 189, 168, 1, 159, 231, 95, 255, 224, 209, 80, 163, 150, 30, 60, 252, 246, 95, 115, 124, 233, 218, 218, 203, 242, 183, 151, 52, 121, 95, 200, 146, 147, 236, 57, 124, 143, 232, 211, 26, 132, 236, 167, 185, 23, 165, 109, 191, 113, 182, 9, 64, 199, 122, 50, 169, 136, 45, 201, 247, 16, 216, 211, 129, 97, 39, 61, 234, 29, 185, 141, 153, 55, 31, 73, 176, 161, 190, 98, 187, 51, 19, 132, 78, 35, 49, 52, 92, 0, 231, 108, 211, 237, 49, 177, 48, 136, 185, 151, 234, 162, 142 },
                            PhoneNumber = "01113436425",
                            Role = "Doctor",
                            UserName = "sayed_taha",
                            DocDegree = "PHD",
                            DocSpecialization = "AI",
                            clinicalDoctor = false
                        },
                        new
                        {
                            Id = 2,
                            Address = "fayoum",
                            Age = 37,
                            BloodType = "A+",
                            CreatedDtm = new DateTime(2022, 6, 29, 18, 45, 44, 996, DateTimeKind.Local).AddTicks(5161),
                            DepartmentId = 1,
                            FirstName = "Mohamed",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "Hamdy",
                            Mail = "mohamed.hamdy@gmail.com",
                            NationalId = "27030351876321",
                            PasswordHash = new byte[] { 218, 219, 211, 215, 39, 105, 192, 14, 182, 183, 155, 254, 39, 76, 53, 75, 183, 222, 119, 186, 162, 64, 246, 228, 233, 104, 239, 135, 63, 167, 56, 74, 205, 69, 238, 163, 201, 199, 70, 72, 202, 219, 169, 254, 154, 50, 233, 141, 41, 35, 109, 130, 145, 173, 49, 151, 17, 103, 10, 188, 155, 182, 24, 19 },
                            PasswordSalt = new byte[] { 147, 83, 22, 242, 69, 211, 230, 97, 246, 105, 63, 235, 66, 210, 121, 163, 159, 117, 24, 11, 74, 34, 195, 25, 32, 197, 157, 24, 125, 138, 188, 122, 182, 2, 172, 95, 208, 129, 17, 26, 155, 95, 102, 65, 194, 149, 179, 116, 35, 83, 140, 130, 119, 56, 21, 18, 3, 196, 253, 1, 67, 112, 174, 253, 30, 184, 205, 74, 69, 102, 34, 207, 83, 187, 147, 67, 53, 178, 53, 139, 147, 130, 88, 35, 251, 201, 130, 32, 200, 69, 144, 208, 102, 206, 39, 214, 150, 49, 63, 170, 104, 178, 184, 171, 48, 133, 139, 112, 246, 95, 51, 165, 210, 149, 93, 49, 88, 150, 16, 132, 162, 119, 193, 140, 133, 210, 82, 106 },
                            PhoneNumber = "01113436425",
                            Role = "Doctor",
                            UserName = "mohamed_hamdy",
                            DocDegree = "PHD",
                            DocSpecialization = "AI",
                            clinicalDoctor = false
                        },
                        new
                        {
                            Id = 3,
                            Address = "fayoum",
                            Age = 50,
                            BloodType = "AB+",
                            CreatedDtm = new DateTime(2022, 6, 29, 18, 45, 44, 996, DateTimeKind.Local).AddTicks(5170),
                            DepartmentId = 2,
                            FirstName = "Amr",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "Refaat",
                            Mail = "amr.refaat@gmail.com",
                            NationalId = "27030351876321",
                            PasswordHash = new byte[] { 104, 48, 79, 108, 70, 87, 234, 217, 164, 1, 66, 63, 241, 111, 112, 57, 250, 71, 145, 192, 243, 25, 137, 167, 203, 197, 245, 237, 131, 130, 75, 208, 223, 242, 89, 103, 97, 247, 226, 7, 148, 115, 188, 248, 87, 229, 212, 162, 255, 232, 123, 221, 113, 206, 161, 102, 34, 56, 43, 23, 214, 150, 77, 254 },
                            PasswordSalt = new byte[] { 90, 108, 167, 48, 80, 162, 93, 141, 75, 234, 214, 0, 45, 20, 25, 131, 214, 37, 109, 116, 125, 97, 35, 98, 236, 121, 108, 117, 63, 168, 109, 218, 137, 164, 126, 21, 31, 159, 168, 73, 218, 189, 116, 155, 126, 53, 53, 252, 37, 152, 179, 35, 183, 154, 96, 40, 119, 255, 186, 244, 157, 170, 21, 88, 177, 178, 139, 189, 222, 85, 88, 246, 147, 130, 219, 98, 104, 14, 210, 223, 98, 85, 113, 133, 135, 206, 112, 163, 67, 23, 7, 130, 143, 82, 132, 115, 24, 236, 81, 178, 69, 76, 36, 110, 98, 195, 112, 190, 170, 219, 91, 138, 205, 120, 88, 20, 159, 244, 104, 140, 254, 14, 199, 49, 65, 152, 101, 1 },
                            PhoneNumber = "01113436425",
                            Role = "Doctor",
                            UserName = "amr_refaat",
                            DocDegree = "PHD",
                            DocSpecialization = "AI",
                            clinicalDoctor = false
                        });
                });

            modelBuilder.Entity("Domain.Models.Users.Nurse", b =>
                {
                    b.HasBaseType("Domain.Models.Users.User");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<string>("NurseDegree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NurseSpecialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasDiscriminator().HasValue("Nurse");
                });

            modelBuilder.Entity("Domain.Models.Users.Patient", b =>
                {
                    b.HasBaseType("Domain.Models.Users.User");

                    b.HasIndex("DepartmentId");

                    b.HasDiscriminator().HasValue("Patient");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            Address = "fayoum",
                            Age = 40,
                            BloodType = "B+",
                            CreatedDtm = new DateTime(2022, 6, 29, 18, 45, 44, 996, DateTimeKind.Local).AddTicks(5893),
                            DepartmentId = 1,
                            FirstName = "Sayed",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "Taha",
                            Mail = "sayed.taha@gmail.com",
                            NationalId = "27030351876321",
                            PasswordHash = new byte[] { 212, 99, 151, 36, 22, 70, 44, 96, 207, 191, 208, 109, 210, 54, 11, 85, 159, 200, 233, 162, 46, 123, 11, 89, 241, 233, 129, 98, 34, 8, 60, 47, 175, 230, 165, 111, 117, 90, 200, 82, 28, 24, 253, 214, 164, 111, 180, 124, 168, 169, 54, 118, 55, 148, 102, 233, 46, 205, 175, 120, 215, 17, 54, 181 },
                            PasswordSalt = new byte[] { 28, 186, 9, 223, 124, 118, 8, 44, 34, 189, 116, 100, 102, 95, 181, 148, 53, 88, 24, 221, 235, 154, 254, 223, 146, 51, 180, 253, 134, 12, 143, 237, 43, 84, 239, 121, 51, 171, 199, 3, 237, 159, 228, 59, 213, 132, 202, 247, 17, 152, 122, 234, 28, 127, 227, 61, 56, 105, 215, 110, 83, 14, 198, 154, 87, 66, 170, 85, 99, 214, 23, 72, 247, 171, 211, 65, 6, 124, 202, 145, 196, 32, 144, 183, 101, 36, 161, 68, 192, 90, 156, 201, 253, 143, 103, 115, 51, 246, 138, 245, 121, 46, 251, 208, 82, 1, 46, 7, 61, 120, 51, 211, 66, 58, 26, 116, 190, 225, 61, 42, 62, 56, 161, 252, 83, 17, 92, 11 },
                            PhoneNumber = "01113436425",
                            Role = "Patient",
                            UserName = "patient1"
                        },
                        new
                        {
                            Id = 5,
                            Address = "fayoum",
                            Age = 37,
                            BloodType = "O+",
                            CreatedDtm = new DateTime(2022, 6, 29, 18, 45, 44, 996, DateTimeKind.Local).AddTicks(5908),
                            DepartmentId = 1,
                            FirstName = "Mohamed",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "Hamdy",
                            Mail = "mohamed.hamdy@gmail.com",
                            NationalId = "27030351876321",
                            PasswordHash = new byte[] { 10, 128, 67, 85, 25, 253, 108, 206, 12, 52, 253, 171, 47, 223, 5, 215, 54, 159, 42, 56, 24, 248, 181, 194, 63, 86, 216, 211, 43, 71, 222, 219, 117, 232, 186, 198, 24, 185, 162, 65, 44, 225, 61, 198, 173, 165, 227, 135, 209, 172, 155, 0, 153, 50, 216, 242, 43, 225, 72, 101, 213, 142, 146, 159 },
                            PasswordSalt = new byte[] { 163, 235, 89, 47, 11, 146, 15, 235, 182, 115, 221, 128, 19, 101, 32, 202, 53, 2, 154, 234, 215, 7, 255, 133, 121, 91, 90, 82, 140, 116, 49, 118, 79, 124, 44, 209, 240, 128, 231, 236, 56, 203, 210, 255, 116, 239, 12, 82, 98, 139, 45, 250, 126, 15, 30, 66, 191, 139, 125, 101, 224, 215, 196, 207, 9, 41, 253, 247, 32, 12, 85, 84, 82, 243, 105, 48, 240, 32, 7, 203, 47, 114, 212, 7, 35, 202, 81, 217, 126, 43, 216, 145, 45, 172, 5, 37, 66, 96, 16, 23, 66, 59, 150, 160, 135, 253, 100, 239, 104, 222, 79, 207, 203, 222, 127, 84, 21, 166, 39, 111, 140, 49, 24, 48, 33, 241, 54, 139 },
                            PhoneNumber = "01113436425",
                            Role = "Patient",
                            UserName = "patient2"
                        },
                        new
                        {
                            Id = 6,
                            Address = "fayoum",
                            Age = 50,
                            BloodType = "O-",
                            CreatedDtm = new DateTime(2022, 6, 29, 18, 45, 44, 996, DateTimeKind.Local).AddTicks(5915),
                            FirstName = "Amr",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "Refaat",
                            Mail = "amr.refaat@gmail.com",
                            NationalId = "27030351876321",
                            PasswordHash = new byte[] { 33, 52, 10, 190, 176, 39, 129, 155, 49, 100, 192, 126, 193, 139, 106, 121, 163, 255, 219, 23, 220, 93, 215, 93, 188, 154, 187, 117, 192, 105, 191, 64, 0, 15, 33, 244, 66, 199, 161, 155, 237, 124, 228, 92, 203, 181, 50, 49, 237, 129, 121, 241, 183, 137, 156, 93, 53, 252, 225, 213, 249, 3, 220, 9 },
                            PasswordSalt = new byte[] { 24, 80, 195, 252, 190, 36, 31, 121, 34, 106, 0, 194, 129, 66, 188, 4, 33, 230, 54, 142, 85, 128, 143, 147, 202, 165, 244, 236, 23, 124, 9, 68, 147, 23, 252, 244, 166, 45, 145, 149, 232, 44, 168, 4, 133, 153, 81, 255, 72, 145, 13, 130, 248, 20, 33, 55, 81, 167, 128, 20, 229, 12, 169, 67, 30, 223, 28, 223, 19, 248, 43, 229, 121, 232, 107, 33, 248, 164, 75, 204, 125, 136, 176, 235, 205, 5, 185, 34, 15, 88, 208, 231, 207, 91, 68, 111, 4, 136, 21, 135, 250, 190, 250, 220, 121, 168, 231, 106, 162, 250, 15, 16, 48, 50, 213, 247, 208, 50, 152, 81, 61, 82, 38, 28, 252, 211, 173, 156 },
                            PhoneNumber = "01113436425",
                            Role = "Patient",
                            UserName = "patient3"
                        });
                });

            modelBuilder.Entity("Domain.Models.Users.Receptionist", b =>
                {
                    b.HasBaseType("Domain.Models.Users.User");

                    b.HasIndex("DepartmentId");

                    b.HasDiscriminator().HasValue("Receptionist");
                });

            modelBuilder.Entity("Domain.Models.Appointment", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Models.Bed", b =>
                {
                    b.HasOne("Domain.Models.Room", "Room")
                        .WithMany("Beds")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Domain.Models.ClinicPatientRecord", b =>
                {
                    b.HasOne("Domain.Models.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.Patient", null)
                        .WithMany("ClinicPatientRecord")
                        .HasForeignKey("PatientId");

                    b.HasOne("Domain.Models.Prescription", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Department");

                    b.Navigation("Doctor");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("Domain.Models.IndoorPatientRecord", b =>
                {
                    b.HasOne("Domain.Models.Bed", "Bed")
                        .WithMany()
                        .HasForeignKey("BedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.Doctor", "OrderdByDoctor")
                        .WithMany()
                        .HasForeignKey("OrderdByDoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.Patient", "Patient")
                        .WithMany("IndoorPatientRecord")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bed");

                    b.Navigation("Department");

                    b.Navigation("OrderdByDoctor");

                    b.Navigation("Patient");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Domain.Models.Labs.LabRequest", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", "IndoorPatientRecord")
                        .WithMany()
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Labs.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("IndoorPatientRecord");

                    b.Navigation("Patient");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Domain.Models.Labs.PatientScan", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", "IndoorPatientRecord")
                        .WithMany("Scans")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Labs.Scan", "Scan")
                        .WithMany()
                        .HasForeignKey("ScanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("IndoorPatientRecord");

                    b.Navigation("Patient");

                    b.Navigation("Scan");
                });

            modelBuilder.Entity("Domain.Models.Labs.PatientTest", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", "IndoorPatientRecord")
                        .WithMany("Tests")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Labs.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("IndoorPatientRecord");

                    b.Navigation("Patient");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Domain.Models.Labs.ScanImage", b =>
                {
                    b.HasOne("Domain.Models.Labs.PatientScan", "PatientScan")
                        .WithMany("ScanImages")
                        .HasForeignKey("PatientScanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientScan");
                });

            modelBuilder.Entity("Domain.Models.Labs.ScanRequest", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", "IndoorPatientRecord")
                        .WithMany()
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Labs.Scan", "Scan")
                        .WithMany()
                        .HasForeignKey("ScanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("IndoorPatientRecord");

                    b.Navigation("Patient");

                    b.Navigation("Scan");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestDetails", b =>
                {
                    b.HasOne("Domain.Models.Labs.TestParameter", "TestParameter")
                        .WithMany()
                        .HasForeignKey("TestParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestParameter");
                });

            modelBuilder.Entity("Domain.Models.Note", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", null)
                        .WithMany("Notes")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Users.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId");

                    b.Navigation("Doctor");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("Domain.Models.Prescription", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.IndoorPatientRecord", null)
                        .WithMany("Prescriptions")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Users.Patient", "patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("patient");
                });

            modelBuilder.Entity("Domain.Models.PrescriptionItem", b =>
                {
                    b.HasOne("Domain.Models.Prescription", null)
                        .WithMany("PrescriptionItems")
                        .HasForeignKey("PrescriptionId");
                });

            modelBuilder.Entity("Domain.Models.Room", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.Schedule", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Domain.Models.TimeSlot", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Domain.Models.VitalSign", b =>
                {
                    b.HasOne("Domain.Models.IndoorPatientRecord", null)
                        .WithMany("VitalSigns")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Note", "Note")
                        .WithMany()
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("Patientid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");

                    b.Navigation("Nurse");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestDetailsCategorical", b =>
                {
                    b.HasOne("Domain.Models.Labs.PatientTest", "PatientTest")
                        .WithMany("CategoricalDetails")
                        .HasForeignKey("PatientTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientTest");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestDetailsNumerical", b =>
                {
                    b.HasOne("Domain.Models.Labs.PatientTest", "PatientTest")
                        .WithMany("NumericalDetails")
                        .HasForeignKey("PatientTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientTest");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestParameterCategorical", b =>
                {
                    b.HasOne("Domain.Models.Labs.Test", "Test")
                        .WithMany("CategoricalParamters")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestParameterNumerical", b =>
                {
                    b.HasOne("Domain.Models.Labs.Test", "Test")
                        .WithMany("NumericalParamters")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Domain.Models.Users.Admin", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.Users.Doctor", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany("Doctors")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", null)
                        .WithMany("Doctors")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.Users.Nurse", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany("Nurses")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", null)
                        .WithMany("Nurses")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.Users.Patient", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany("Patients")
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.Users.Receptionist", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.Department", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Nurses");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Domain.Models.IndoorPatientRecord", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Notes");

                    b.Navigation("Nurses");

                    b.Navigation("Prescriptions");

                    b.Navigation("Scans");

                    b.Navigation("Tests");

                    b.Navigation("VitalSigns");
                });

            modelBuilder.Entity("Domain.Models.Labs.PatientScan", b =>
                {
                    b.Navigation("ScanImages");
                });

            modelBuilder.Entity("Domain.Models.Labs.PatientTest", b =>
                {
                    b.Navigation("CategoricalDetails");

                    b.Navigation("NumericalDetails");
                });

            modelBuilder.Entity("Domain.Models.Labs.Test", b =>
                {
                    b.Navigation("CategoricalParamters");

                    b.Navigation("NumericalParamters");
                });

            modelBuilder.Entity("Domain.Models.Prescription", b =>
                {
                    b.Navigation("PrescriptionItems");
                });

            modelBuilder.Entity("Domain.Models.Room", b =>
                {
                    b.Navigation("Beds");
                });

            modelBuilder.Entity("Domain.Models.Users.Patient", b =>
                {
                    b.Navigation("ClinicPatientRecord");

                    b.Navigation("IndoorPatientRecord");
                });
#pragma warning restore 612, 618
        }
    }
}
