// <auto-generated />
using System;
using Domain.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220626174709_SeedData")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("AppointmentCharge")
                        .HasColumnType("real");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AppointmentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("Examined")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Domain.Models.Bed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<bool>("Reserved")
                        .HasColumnType("bit");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Beds");
                });

            modelBuilder.Entity("Domain.Models.ClinicPatientRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("OralMedicalHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("ClinicPatients");
                });

            modelBuilder.Entity("Domain.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Department_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Department_Name = "paediatrics",
                            IsActive = true,
                            Location = "first floor"
                        },
                        new
                        {
                            Id = 2,
                            Department_Name = "gynaecology",
                            IsActive = true,
                            Location = "first floor"
                        },
                        new
                        {
                            Id = 3,
                            Department_Name = "eye",
                            IsActive = false,
                            Location = "second floor"
                        },
                        new
                        {
                            Id = 4,
                            Department_Name = "orthopaedics",
                            IsActive = true,
                            Location = "third floor"
                        },
                        new
                        {
                            Id = 5,
                            Department_Name = "neurology",
                            IsActive = true,
                            Location = "second floor"
                        },
                        new
                        {
                            Id = 6,
                            Department_Name = "cardiology",
                            IsActive = true,
                            Location = "fourth floor"
                        },
                        new
                        {
                            Id = 7,
                            Department_Name = "dental",
                            IsActive = false,
                            Location = "fourth floor"
                        },
                        new
                        {
                            Id = 8,
                            Department_Name = "ENT",
                            IsActive = true,
                            Location = "third floor"
                        },
                        new
                        {
                            Id = 9,
                            Department_Name = "Labs",
                            IsActive = true,
                            Location = "third floor"
                        },
                        new
                        {
                            Id = 10,
                            Department_Name = "Scan",
                            IsActive = true,
                            Location = "third floor"
                        });
                });

            modelBuilder.Entity("Domain.Models.IndoorPatientRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BedId")
                        .HasColumnType("int");

                    b.Property<string>("CauseOfAdmission")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DischargeDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Disharged")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EnterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OralMedicalHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderdByDoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Recommendation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BedId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("OrderdByDoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RoomId");

                    b.ToTable("IndoorPatients");
                });

            modelBuilder.Entity("Domain.Models.Labs.LabRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TestId");

                    b.ToTable("LabRequests");
                });

            modelBuilder.Entity("Domain.Models.Labs.PatientScan", b =>
                {
                    b.Property<int>("PatientScanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientScanId"), 1L, 1);

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScanDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ScanId")
                        .HasColumnType("int");

                    b.Property<string>("WrittenReport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientScanId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ScanId");

                    b.ToTable("PatientScans");
                });

            modelBuilder.Entity("Domain.Models.Labs.PatientTest", b =>
                {
                    b.Property<int>("PatientTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientTestId"), 1L, 1);

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("PatientTestId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TestId");

                    b.ToTable("PatientTest");
                });

            modelBuilder.Entity("Domain.Models.Labs.Scan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("ScanCharge")
                        .HasColumnType("real");

                    b.Property<string>("ScanName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Scan");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ScanCharge = 100f,
                            ScanName = "Angiography"
                        },
                        new
                        {
                            Id = 2,
                            ScanCharge = 100f,
                            ScanName = "CT"
                        },
                        new
                        {
                            Id = 3,
                            ScanCharge = 100f,
                            ScanName = "Echocardiogram"
                        },
                        new
                        {
                            Id = 4,
                            ScanCharge = 100f,
                            ScanName = "Electrocardiogram (ECG)"
                        },
                        new
                        {
                            Id = 5,
                            ScanCharge = 100f,
                            ScanName = "MRI scan"
                        },
                        new
                        {
                            Id = 6,
                            ScanCharge = 100f,
                            ScanName = "PET scan"
                        },
                        new
                        {
                            Id = 7,
                            ScanCharge = 100f,
                            ScanName = "Ultrasound scan"
                        },
                        new
                        {
                            Id = 8,
                            ScanCharge = 100f,
                            ScanName = "X-ray"
                        });
                });

            modelBuilder.Entity("Domain.Models.Labs.ScanRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("ScanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ScanId");

                    b.ToTable("ScanRequests");
                });

            modelBuilder.Entity("Domain.Models.Labs.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TestCharge")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Tests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CBC",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 2,
                            Name = "ESR",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 3,
                            Name = "LIVER FUNCTION TEST",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 4,
                            Name = "Kidney function test",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 5,
                            Name = "Cholesterol test",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 6,
                            Name = "pituitary gland test",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 7,
                            Name = "H.pylori test",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 8,
                            Name = "thyroid gland report",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 9,
                            Name = "STOOL TEST",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 10,
                            Name = "urine report",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 11,
                            Name = "Pcr",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 12,
                            Name = "Diabetes test",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 13,
                            Name = "esr",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 14,
                            Name = "esr",
                            TestCharge = 100f
                        });
                });

            modelBuilder.Entity("Domain.Models.Labs.TestDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PatientTestId")
                        .HasColumnType("int");

                    b.Property<int>("TestParameterId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TestParameterId");

                    b.ToTable("TestDetails", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("TestDetails");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FieldType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InputPattern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<string>("TestParameterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TestParameters", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("TestParameter");
                });

            modelBuilder.Entity("Domain.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int?>("NurseId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("NurseId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Domain.Models.Prescription", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionId"), 1L, 1);

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Prescription_Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("re_appointement_date")
                        .HasColumnType("datetime2");

                    b.HasKey("PrescriptionId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("PatientId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("Domain.Models.PrescriptionItem", b =>
                {
                    b.Property<int>("PrescriptionItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionItemId"), 1L, 1);

                    b.Property<string>("Dose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Durarion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicineType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medicine_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medicine_concentration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrescriptionId")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionItemId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PrescriptionItems");
                });

            modelBuilder.Entity("Domain.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfBeds")
                        .HasColumnType("int");

                    b.Property<bool>("Reserved")
                        .HasColumnType("bit");

                    b.Property<int>("RoomCharges")
                        .HasColumnType("int");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.Property<string>("RoomType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentId = 1,
                            FloorNumber = 1,
                            NumberOfBeds = 4,
                            Reserved = false,
                            RoomCharges = 120,
                            RoomNumber = 1,
                            RoomType = "common"
                        },
                        new
                        {
                            Id = 2,
                            DepartmentId = 1,
                            FloorNumber = 1,
                            NumberOfBeds = 2,
                            Reserved = false,
                            RoomCharges = 140,
                            RoomNumber = 2,
                            RoomType = "common"
                        },
                        new
                        {
                            Id = 3,
                            DepartmentId = 1,
                            FloorNumber = 1,
                            NumberOfBeds = 1,
                            Reserved = false,
                            RoomCharges = 200,
                            RoomNumber = 3,
                            RoomType = "suite"
                        },
                        new
                        {
                            Id = 4,
                            DepartmentId = 1,
                            FloorNumber = 2,
                            NumberOfBeds = 4,
                            Reserved = false,
                            RoomCharges = 120,
                            RoomNumber = 4,
                            RoomType = "common"
                        },
                        new
                        {
                            Id = 5,
                            DepartmentId = 2,
                            FloorNumber = 2,
                            NumberOfBeds = 4,
                            Reserved = false,
                            RoomCharges = 120,
                            RoomNumber = 5,
                            RoomType = "common"
                        },
                        new
                        {
                            Id = 6,
                            DepartmentId = 2,
                            FloorNumber = 2,
                            NumberOfBeds = 4,
                            Reserved = false,
                            RoomCharges = 120,
                            RoomNumber = 6,
                            RoomType = "common"
                        },
                        new
                        {
                            Id = 7,
                            DepartmentId = 2,
                            FloorNumber = 3,
                            NumberOfBeds = 1,
                            Reserved = false,
                            RoomCharges = 200,
                            RoomNumber = 7,
                            RoomType = "suite"
                        },
                        new
                        {
                            Id = 8,
                            DepartmentId = 1,
                            FloorNumber = 3,
                            NumberOfBeds = 2,
                            Reserved = false,
                            RoomCharges = 140,
                            RoomNumber = 8,
                            RoomType = "common"
                        });
                });

            modelBuilder.Entity("Domain.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DayOfWork")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("TimePerPatient")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Domain.Models.TimeSlot", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("Dayofwork")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("Reserved")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("slot_time")
                        .HasColumnType("time");

                    b.Property<int>("slotnumber")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("DoctorId");

                    b.ToTable("TimeSlots");
                });

            modelBuilder.Entity("Domain.Models.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("Role").HasValue("User");
                });

            modelBuilder.Entity("Domain.Models.VitalSign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("ECG")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.Property<int>("NurseId")
                        .HasColumnType("int");

                    b.Property<int>("Patientid")
                        .HasColumnType("int");

                    b.Property<string>("Pressure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PulseRate")
                        .HasColumnType("int");

                    b.Property<float>("RespirationRate")
                        .HasColumnType("real");

                    b.Property<float>("Temperature")
                        .HasColumnType("real");

                    b.Property<DateTime>("vitals_date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("NoteId");

                    b.HasIndex("NurseId");

                    b.HasIndex("Patientid");

                    b.ToTable("VitalSigns");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestDetailsCategorical", b =>
                {
                    b.HasBaseType("Domain.Models.Labs.TestDetails");

                    b.Property<string>("MeasuredValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("PatientTestId");

                    b.HasDiscriminator().HasValue("Categorical");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestDetailsNumerical", b =>
                {
                    b.HasBaseType("Domain.Models.Labs.TestDetails");

                    b.Property<float>("MeasuredValue")
                        .HasColumnType("real")
                        .HasColumnName("TestDetailsNumerical_MeasuredValue");

                    b.HasIndex("PatientTestId");

                    b.HasDiscriminator().HasValue("Numerical");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestParameterCategorical", b =>
                {
                    b.HasBaseType("Domain.Models.Labs.TestParameter");

                    b.Property<string>("Normalvalue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("TestId");

                    b.HasDiscriminator().HasValue("Categorical");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestParameterNumerical", b =>
                {
                    b.HasBaseType("Domain.Models.Labs.TestParameter");

                    b.Property<float>("Max_Range")
                        .HasColumnType("real");

                    b.Property<float>("Min_Range")
                        .HasColumnType("real");

                    b.HasIndex("TestId");

                    b.HasDiscriminator().HasValue("Numerical");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "Heamoglobin(edta blood)",
                            Unit = "g/dl",
                            Max_Range = 15.5f,
                            Min_Range = 11.5f
                        },
                        new
                        {
                            Id = 2,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "Haematocrit(pcv)",
                            Unit = "%",
                            Max_Range = 45f,
                            Min_Range = 36f
                        },
                        new
                        {
                            Id = 3,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "RBCs count(EDTA Blood)",
                            Unit = "Millions/cmm",
                            Max_Range = 5.2f,
                            Min_Range = 4f
                        },
                        new
                        {
                            Id = 4,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "mcv",
                            Unit = "Fl",
                            Max_Range = 100f,
                            Min_Range = 80f
                        },
                        new
                        {
                            Id = 5,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "mch",
                            Unit = "Pg",
                            Max_Range = 33f,
                            Min_Range = 27f
                        },
                        new
                        {
                            Id = 6,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "mchc",
                            Unit = "g/dl",
                            Max_Range = 37f,
                            Min_Range = 31f
                        },
                        new
                        {
                            Id = 7,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "Rdw-cv",
                            Unit = "%",
                            Max_Range = 15f,
                            Min_Range = 11.5f
                        },
                        new
                        {
                            Id = 8,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "Platelet count (edta blood)",
                            Unit = "Thousands/cmm",
                            Max_Range = 450f,
                            Min_Range = 150f
                        },
                        new
                        {
                            Id = 9,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "Total leucocytic count (edta blood)",
                            Unit = "Thousands/cmm",
                            Max_Range = 11f,
                            Min_Range = 4f
                        },
                        new
                        {
                            Id = 10,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "neutrophis",
                            Unit = "×10^9/l",
                            Max_Range = 7f,
                            Min_Range = 2f
                        },
                        new
                        {
                            Id = 11,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "lymphocytes",
                            Unit = "×10^9/l",
                            Max_Range = 4.8f,
                            Min_Range = 1f
                        },
                        new
                        {
                            Id = 12,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "monocytes",
                            Unit = "×10^9/l",
                            Max_Range = 1f,
                            Min_Range = 0.2f
                        },
                        new
                        {
                            Id = 13,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "eosinophils",
                            Unit = "×10^9/l",
                            Max_Range = 0.45f,
                            Min_Range = 0.1f
                        },
                        new
                        {
                            Id = 14,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "basophils",
                            Unit = "×10^9/l",
                            Max_Range = 0.1f,
                            Min_Range = 0f
                        },
                        new
                        {
                            Id = 15,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 2,
                            TestParameterName = "First hour male",
                            Unit = "mm",
                            Max_Range = 7f,
                            Min_Range = 3f
                        },
                        new
                        {
                            Id = 16,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 2,
                            TestParameterName = "First hour female",
                            Unit = "mm",
                            Max_Range = 12f,
                            Min_Range = 7f
                        },
                        new
                        {
                            Id = 17,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 2,
                            TestParameterName = "Second hour male",
                            Unit = "mm",
                            Max_Range = 15f,
                            Min_Range = 7f
                        },
                        new
                        {
                            Id = 18,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 2,
                            TestParameterName = "Second hour female",
                            Unit = "mm",
                            Max_Range = 17f,
                            Min_Range = 12f
                        },
                        new
                        {
                            Id = 19,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Bilirubin total",
                            Unit = "mg/dl",
                            Max_Range = 1f,
                            Min_Range = 0f
                        },
                        new
                        {
                            Id = 20,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Bilirubin direct",
                            Unit = "mg/dl",
                            Max_Range = 0.3f,
                            Min_Range = 0f
                        },
                        new
                        {
                            Id = 21,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Bilirubin indirect",
                            Unit = "mg/dl",
                            Max_Range = 11.7f,
                            Min_Range = 0f
                        },
                        new
                        {
                            Id = 22,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Sgot(ast)",
                            Unit = "u/i",
                            Max_Range = 0.35f,
                            Min_Range = 0f
                        },
                        new
                        {
                            Id = 23,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Sgpt(alt)",
                            Unit = "u/i",
                            Max_Range = 0.45f,
                            Min_Range = 0f
                        },
                        new
                        {
                            Id = 24,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Alkaline phosphatase",
                            Unit = "u/i",
                            Max_Range = 341f,
                            Min_Range = 124f
                        },
                        new
                        {
                            Id = 25,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Total proten",
                            Unit = "mg/dl",
                            Max_Range = 8.3f,
                            Min_Range = 6.6f
                        },
                        new
                        {
                            Id = 26,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Albumin",
                            Unit = "g/dl",
                            Max_Range = 4.9f,
                            Min_Range = 3.5f
                        },
                        new
                        {
                            Id = 27,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Globulin",
                            Unit = "g/dl",
                            Max_Range = 3.5f,
                            Min_Range = 2.3f
                        },
                        new
                        {
                            Id = 28,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "a/g ration",
                            Unit = "g/dl",
                            Max_Range = 1.56f,
                            Min_Range = 1.25f
                        },
                        new
                        {
                            Id = 29,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Blood urea nitrogen(BUN)",
                            Unit = "mg/dl",
                            Max_Range = 25f,
                            Min_Range = 5f
                        },
                        new
                        {
                            Id = 30,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Creatinine(CRE)",
                            Unit = "mg/dl",
                            Max_Range = 1.4f,
                            Min_Range = 0.3f
                        },
                        new
                        {
                            Id = 31,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Uric acid(UA)",
                            Unit = "mg/dl",
                            Max_Range = 7f,
                            Min_Range = 2.5f
                        },
                        new
                        {
                            Id = 32,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Albumin-globilin in ratio(A/G ratio)",
                            Unit = "mg/dl",
                            Max_Range = 1.8f,
                            Min_Range = 1f
                        },
                        new
                        {
                            Id = 33,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "creatinine Clearance/24 hrs urine (CC) Male",
                            Unit = "ml/min",
                            Max_Range = 135f,
                            Min_Range = 71f
                        },
                        new
                        {
                            Id = 34,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "creatinine Clearance/24 hrs urine (CC) Female",
                            Unit = "ml/min",
                            Max_Range = 116f,
                            Min_Range = 78f
                        },
                        new
                        {
                            Id = 35,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Renin",
                            Unit = "pg/ml/hr",
                            Max_Range = 3.95f,
                            Min_Range = 0.15f
                        },
                        new
                        {
                            Id = 36,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Creatinine urine",
                            Unit = "mg/dl",
                            Max_Range = 250f,
                            Min_Range = 60f
                        },
                        new
                        {
                            Id = 37,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Natrium(Na)",
                            Unit = "meq/l",
                            Max_Range = 145f,
                            Min_Range = 135f
                        },
                        new
                        {
                            Id = 38,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Potassium (K)",
                            Unit = "meq/l",
                            Max_Range = 4.5f,
                            Min_Range = 3.4f
                        },
                        new
                        {
                            Id = 39,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Calcium (Ca)",
                            Unit = "mg/dl",
                            Max_Range = 10.6f,
                            Min_Range = 8.4f
                        },
                        new
                        {
                            Id = 40,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Phosphorus (IP)",
                            Unit = "mg/dl",
                            Max_Range = 4.7f,
                            Min_Range = 2.1f
                        },
                        new
                        {
                            Id = 41,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Alkaline phosphatase (ALP)",
                            Unit = "U/L",
                            Max_Range = 110f,
                            Min_Range = 27f
                        });
                });

            modelBuilder.Entity("Domain.Models.Users.Admin", b =>
                {
                    b.HasBaseType("Domain.Models.Users.User");

                    b.HasIndex("DepartmentId");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("Domain.Models.Users.Doctor", b =>
                {
                    b.HasBaseType("Domain.Models.Users.User");

                    b.Property<string>("DocDegree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocSpecialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int")
                        .HasColumnName("Doctor_IndoorPatientRecordId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasDiscriminator().HasValue("Doctor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "fayoum",
                            Age = 40,
                            BloodType = "B+",
                            CreatedDtm = new DateTime(2022, 6, 26, 19, 47, 7, 884, DateTimeKind.Local).AddTicks(3117),
                            DepartmentId = 1,
                            FirstName = "Sayed",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "Taha",
                            Mail = "sayed.taha@gmail.com",
                            NationalId = "27030351876321",
                            PasswordHash = new byte[] { 85, 140, 4, 100, 69, 239, 254, 61, 242, 71, 88, 69, 115, 86, 29, 241, 133, 58, 158, 46, 121, 131, 2, 72, 255, 230, 228, 196, 211, 12, 108, 169, 12, 90, 171, 159, 98, 74, 222, 197, 86, 172, 2, 62, 242, 215, 201, 77, 27, 161, 168, 19, 232, 55, 255, 233, 126, 166, 165, 67, 242, 111, 195, 9 },
                            PasswordSalt = new byte[] { 212, 75, 230, 22, 197, 180, 30, 167, 217, 183, 68, 83, 17, 253, 90, 202, 106, 187, 31, 234, 41, 103, 87, 23, 231, 200, 84, 4, 145, 120, 205, 91, 109, 37, 185, 98, 237, 182, 62, 133, 182, 23, 189, 73, 36, 31, 187, 165, 214, 66, 119, 108, 245, 50, 52, 79, 94, 247, 235, 82, 161, 190, 6, 83, 185, 121, 104, 127, 248, 230, 0, 110, 37, 254, 11, 131, 203, 113, 11, 117, 65, 244, 26, 122, 9, 28, 203, 59, 49, 69, 239, 156, 31, 105, 83, 86, 18, 195, 133, 101, 173, 73, 231, 184, 165, 58, 90, 173, 243, 128, 70, 60, 196, 157, 149, 119, 152, 180, 254, 173, 97, 47, 124, 126, 221, 56, 34, 220 },
                            PhoneNumber = "01113436425",
                            Role = "Doctor",
                            UserName = "sayed_taha",
                            DocDegree = "PHD",
                            DocSpecialization = "AI"
                        },
                        new
                        {
                            Id = 2,
                            Address = "fayoum",
                            Age = 37,
                            BloodType = "A+",
                            CreatedDtm = new DateTime(2022, 6, 26, 19, 47, 7, 884, DateTimeKind.Local).AddTicks(3142),
                            DepartmentId = 1,
                            FirstName = "Mohamed",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "Hamdy",
                            Mail = "mohamed.hamdy@gmail.com",
                            NationalId = "27030351876321",
                            PasswordHash = new byte[] { 213, 140, 167, 207, 165, 213, 55, 183, 86, 196, 97, 218, 171, 218, 88, 255, 166, 197, 172, 154, 113, 217, 218, 31, 238, 191, 219, 100, 130, 66, 194, 79, 65, 98, 87, 97, 88, 220, 28, 10, 69, 163, 80, 241, 214, 79, 99, 80, 42, 35, 195, 82, 47, 128, 51, 171, 11, 58, 150, 105, 76, 19, 149, 123 },
                            PasswordSalt = new byte[] { 10, 92, 189, 146, 195, 173, 207, 35, 109, 255, 194, 175, 245, 177, 125, 246, 206, 84, 224, 146, 246, 43, 186, 241, 144, 150, 84, 36, 230, 236, 43, 98, 153, 97, 249, 235, 99, 219, 120, 196, 108, 17, 94, 112, 23, 29, 244, 16, 180, 86, 228, 53, 67, 144, 78, 81, 96, 125, 9, 68, 12, 190, 147, 137, 130, 241, 188, 17, 205, 50, 114, 228, 14, 97, 252, 239, 144, 53, 45, 237, 182, 19, 179, 219, 160, 153, 207, 64, 164, 197, 115, 61, 184, 167, 143, 136, 87, 245, 202, 192, 201, 136, 255, 180, 13, 103, 79, 104, 251, 241, 188, 238, 151, 143, 7, 0, 225, 138, 240, 232, 18, 132, 148, 199, 169, 166, 237, 162 },
                            PhoneNumber = "01113436425",
                            Role = "Doctor",
                            UserName = "mohamed_hamdy",
                            DocDegree = "PHD",
                            DocSpecialization = "AI"
                        },
                        new
                        {
                            Id = 3,
                            Address = "fayoum",
                            Age = 50,
                            BloodType = "AB+",
                            CreatedDtm = new DateTime(2022, 6, 26, 19, 47, 7, 884, DateTimeKind.Local).AddTicks(3148),
                            DepartmentId = 2,
                            FirstName = "Amr",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "Refaat",
                            Mail = "amr.refaat@gmail.com",
                            NationalId = "27030351876321",
                            PasswordHash = new byte[] { 27, 112, 227, 67, 72, 79, 54, 97, 112, 9, 66, 189, 202, 210, 223, 184, 33, 77, 64, 107, 113, 233, 249, 70, 88, 55, 167, 141, 197, 9, 76, 200, 174, 16, 167, 167, 166, 16, 221, 145, 219, 237, 17, 85, 254, 2, 245, 62, 95, 156, 253, 88, 83, 201, 132, 173, 255, 49, 113, 249, 195, 136, 213, 16 },
                            PasswordSalt = new byte[] { 20, 248, 176, 231, 131, 73, 115, 27, 91, 0, 81, 93, 123, 169, 228, 214, 232, 123, 65, 51, 12, 136, 70, 75, 176, 187, 122, 17, 248, 50, 19, 235, 163, 153, 39, 223, 63, 142, 97, 101, 159, 164, 244, 118, 62, 139, 80, 146, 1, 202, 183, 246, 9, 184, 247, 252, 34, 83, 106, 26, 9, 161, 189, 204, 145, 136, 88, 30, 133, 61, 84, 138, 75, 233, 248, 106, 130, 73, 55, 107, 160, 83, 85, 116, 162, 114, 102, 88, 113, 16, 221, 63, 102, 9, 207, 12, 238, 29, 205, 134, 17, 26, 213, 188, 223, 166, 250, 51, 98, 205, 81, 181, 214, 184, 110, 95, 235, 220, 198, 237, 46, 126, 34, 223, 205, 194, 219, 152 },
                            PhoneNumber = "01113436425",
                            Role = "Doctor",
                            UserName = "amr_refaat",
                            DocDegree = "PHD",
                            DocSpecialization = "AI"
                        });
                });

            modelBuilder.Entity("Domain.Models.Users.Nurse", b =>
                {
                    b.HasBaseType("Domain.Models.Users.User");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<string>("NurseDegree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NurseSpecialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasDiscriminator().HasValue("Nurse");
                });

            modelBuilder.Entity("Domain.Models.Users.Patient", b =>
                {
                    b.HasBaseType("Domain.Models.Users.User");

                    b.HasIndex("DepartmentId");

                    b.HasDiscriminator().HasValue("Patient");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            Address = "fayoum",
                            Age = 40,
                            BloodType = "B+",
                            CreatedDtm = new DateTime(2022, 6, 26, 19, 47, 7, 884, DateTimeKind.Local).AddTicks(3592),
                            DepartmentId = 1,
                            FirstName = "Sayed",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "Taha",
                            Mail = "sayed.taha@gmail.com",
                            NationalId = "27030351876321",
                            PasswordHash = new byte[] { 170, 132, 253, 150, 179, 67, 85, 232, 24, 11, 147, 113, 204, 138, 50, 176, 103, 29, 217, 35, 122, 147, 254, 84, 184, 66, 241, 25, 47, 233, 176, 182, 0, 141, 150, 212, 27, 227, 167, 14, 129, 186, 129, 201, 197, 109, 142, 136, 141, 243, 30, 58, 143, 137, 39, 16, 7, 52, 43, 219, 65, 19, 116, 99 },
                            PasswordSalt = new byte[] { 133, 5, 21, 180, 195, 118, 133, 199, 158, 110, 143, 133, 87, 234, 116, 191, 19, 205, 57, 177, 126, 230, 45, 87, 18, 150, 161, 43, 159, 14, 67, 7, 88, 23, 133, 12, 211, 205, 42, 181, 244, 87, 56, 211, 241, 129, 203, 13, 161, 125, 40, 17, 30, 18, 239, 98, 79, 83, 41, 117, 156, 91, 19, 234, 115, 18, 145, 197, 18, 197, 188, 164, 25, 69, 49, 159, 59, 95, 12, 112, 170, 82, 119, 10, 157, 203, 187, 136, 116, 168, 216, 93, 31, 180, 225, 246, 253, 3, 232, 27, 9, 4, 105, 157, 253, 97, 107, 95, 92, 112, 22, 100, 1, 144, 89, 13, 195, 86, 173, 219, 37, 152, 24, 0, 79, 175, 12, 50 },
                            PhoneNumber = "01113436425",
                            Role = "Patient",
                            UserName = "patient1"
                        },
                        new
                        {
                            Id = 5,
                            Address = "fayoum",
                            Age = 37,
                            BloodType = "O+",
                            CreatedDtm = new DateTime(2022, 6, 26, 19, 47, 7, 884, DateTimeKind.Local).AddTicks(3600),
                            DepartmentId = 1,
                            FirstName = "Mohamed",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "Hamdy",
                            Mail = "mohamed.hamdy@gmail.com",
                            NationalId = "27030351876321",
                            PasswordHash = new byte[] { 86, 9, 206, 247, 52, 88, 84, 64, 145, 64, 130, 11, 161, 71, 23, 20, 216, 210, 152, 79, 255, 102, 105, 198, 157, 93, 72, 0, 133, 29, 188, 214, 77, 115, 65, 66, 192, 59, 250, 39, 201, 202, 168, 191, 73, 255, 204, 87, 120, 225, 53, 194, 245, 19, 137, 159, 105, 146, 43, 8, 207, 128, 42, 103 },
                            PasswordSalt = new byte[] { 196, 121, 92, 113, 40, 177, 190, 172, 84, 192, 231, 139, 171, 94, 112, 82, 222, 6, 150, 232, 30, 11, 224, 41, 152, 112, 76, 108, 126, 205, 210, 95, 15, 77, 89, 168, 152, 224, 145, 149, 11, 25, 248, 248, 141, 218, 146, 132, 227, 41, 4, 234, 150, 243, 122, 231, 70, 17, 140, 157, 248, 45, 9, 208, 237, 122, 120, 23, 123, 4, 181, 40, 89, 129, 226, 196, 30, 24, 82, 158, 204, 123, 198, 187, 158, 215, 88, 62, 48, 158, 131, 93, 87, 140, 13, 184, 147, 46, 123, 195, 109, 68, 53, 179, 139, 195, 164, 199, 94, 133, 3, 189, 240, 254, 232, 132, 250, 241, 27, 55, 250, 0, 133, 20, 20, 242, 210, 6 },
                            PhoneNumber = "01113436425",
                            Role = "Patient",
                            UserName = "patient2"
                        },
                        new
                        {
                            Id = 6,
                            Address = "fayoum",
                            Age = 50,
                            BloodType = "O-",
                            CreatedDtm = new DateTime(2022, 6, 26, 19, 47, 7, 884, DateTimeKind.Local).AddTicks(3605),
                            FirstName = "Amr",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "Refaat",
                            Mail = "amr.refaat@gmail.com",
                            NationalId = "27030351876321",
                            PasswordHash = new byte[] { 59, 143, 79, 202, 153, 67, 57, 74, 1, 57, 192, 204, 222, 64, 198, 87, 144, 86, 211, 45, 121, 247, 227, 182, 19, 131, 252, 45, 92, 9, 161, 42, 102, 214, 44, 39, 104, 179, 109, 223, 163, 26, 116, 110, 12, 105, 90, 75, 186, 187, 119, 190, 73, 141, 215, 194, 14, 186, 205, 168, 84, 106, 7, 162 },
                            PasswordSalt = new byte[] { 66, 122, 122, 70, 236, 73, 193, 66, 158, 73, 206, 24, 146, 69, 8, 201, 112, 213, 196, 161, 240, 17, 118, 192, 67, 177, 224, 150, 1, 100, 199, 246, 246, 95, 20, 236, 106, 40, 165, 85, 195, 27, 236, 93, 141, 66, 48, 107, 91, 233, 121, 136, 67, 202, 62, 195, 174, 188, 6, 97, 202, 62, 168, 95, 50, 7, 80, 184, 220, 45, 215, 29, 65, 141, 21, 103, 38, 240, 236, 131, 29, 82, 227, 40, 38, 242, 251, 169, 182, 152, 41, 231, 166, 34, 75, 153, 61, 200, 137, 3, 182, 213, 112, 223, 221, 10, 178, 197, 200, 3, 77, 176, 58, 32, 51, 204, 179, 181, 192, 228, 9, 32, 184, 23, 203, 151, 22, 159 },
                            PhoneNumber = "01113436425",
                            Role = "Patient",
                            UserName = "patient3"
                        });
                });

            modelBuilder.Entity("Domain.Models.Users.Receptionist", b =>
                {
                    b.HasBaseType("Domain.Models.Users.User");

                    b.HasIndex("DepartmentId");

                    b.HasDiscriminator().HasValue("Receptionist");
                });

            modelBuilder.Entity("Domain.Models.Appointment", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Models.Bed", b =>
                {
                    b.HasOne("Domain.Models.Room", "Room")
                        .WithMany("Beds")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Domain.Models.ClinicPatientRecord", b =>
                {
                    b.HasOne("Domain.Models.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.Patient", null)
                        .WithMany("ClinicPatientRecord")
                        .HasForeignKey("PatientId");

                    b.HasOne("Domain.Models.Prescription", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Department");

                    b.Navigation("Doctor");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("Domain.Models.IndoorPatientRecord", b =>
                {
                    b.HasOne("Domain.Models.Bed", "Bed")
                        .WithMany()
                        .HasForeignKey("BedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.Doctor", "OrderdByDoctor")
                        .WithMany()
                        .HasForeignKey("OrderdByDoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.Patient", "Patient")
                        .WithMany("IndoorPatientRecord")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bed");

                    b.Navigation("Department");

                    b.Navigation("OrderdByDoctor");

                    b.Navigation("Patient");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Domain.Models.Labs.LabRequest", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", "IndoorPatientRecord")
                        .WithMany()
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Labs.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("IndoorPatientRecord");

                    b.Navigation("Patient");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Domain.Models.Labs.PatientScan", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", "IndoorPatientRecord")
                        .WithMany("Scans")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Labs.Scan", "Scan")
                        .WithMany()
                        .HasForeignKey("ScanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("IndoorPatientRecord");

                    b.Navigation("Patient");

                    b.Navigation("Scan");
                });

            modelBuilder.Entity("Domain.Models.Labs.PatientTest", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", "IndoorPatientRecord")
                        .WithMany("Tests")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Labs.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("IndoorPatientRecord");

                    b.Navigation("Patient");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Domain.Models.Labs.ScanRequest", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", "IndoorPatientRecord")
                        .WithMany()
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Labs.Scan", "Scan")
                        .WithMany()
                        .HasForeignKey("ScanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("IndoorPatientRecord");

                    b.Navigation("Patient");

                    b.Navigation("Scan");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestDetails", b =>
                {
                    b.HasOne("Domain.Models.Labs.TestParameter", "TestParameter")
                        .WithMany()
                        .HasForeignKey("TestParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestParameter");
                });

            modelBuilder.Entity("Domain.Models.Note", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", null)
                        .WithMany("Notes")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Users.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId");

                    b.Navigation("Doctor");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("Domain.Models.Prescription", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.IndoorPatientRecord", null)
                        .WithMany("Prescriptions")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Users.Patient", "patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("patient");
                });

            modelBuilder.Entity("Domain.Models.PrescriptionItem", b =>
                {
                    b.HasOne("Domain.Models.Prescription", null)
                        .WithMany("PrescriptionItems")
                        .HasForeignKey("PrescriptionId");
                });

            modelBuilder.Entity("Domain.Models.Room", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.Schedule", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Domain.Models.TimeSlot", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Domain.Models.VitalSign", b =>
                {
                    b.HasOne("Domain.Models.IndoorPatientRecord", null)
                        .WithMany("VitalSigns")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Note", "Note")
                        .WithMany()
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("Patientid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");

                    b.Navigation("Nurse");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestDetailsCategorical", b =>
                {
                    b.HasOne("Domain.Models.Labs.PatientTest", "PatientTest")
                        .WithMany("CategoricalDetails")
                        .HasForeignKey("PatientTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientTest");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestDetailsNumerical", b =>
                {
                    b.HasOne("Domain.Models.Labs.PatientTest", "PatientTest")
                        .WithMany("NumericalDetails")
                        .HasForeignKey("PatientTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientTest");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestParameterCategorical", b =>
                {
                    b.HasOne("Domain.Models.Labs.Test", "Test")
                        .WithMany("CategoricalParamters")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestParameterNumerical", b =>
                {
                    b.HasOne("Domain.Models.Labs.Test", "Test")
                        .WithMany("NumericalParamters")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Domain.Models.Users.Admin", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.Users.Doctor", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany("Doctors")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", null)
                        .WithMany("Doctors")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.Users.Nurse", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany("Nurses")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", null)
                        .WithMany("Nurses")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.Users.Patient", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany("Patients")
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.Users.Receptionist", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.Department", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Nurses");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Domain.Models.IndoorPatientRecord", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Notes");

                    b.Navigation("Nurses");

                    b.Navigation("Prescriptions");

                    b.Navigation("Scans");

                    b.Navigation("Tests");

                    b.Navigation("VitalSigns");
                });

            modelBuilder.Entity("Domain.Models.Labs.PatientTest", b =>
                {
                    b.Navigation("CategoricalDetails");

                    b.Navigation("NumericalDetails");
                });

            modelBuilder.Entity("Domain.Models.Labs.Test", b =>
                {
                    b.Navigation("CategoricalParamters");

                    b.Navigation("NumericalParamters");
                });

            modelBuilder.Entity("Domain.Models.Prescription", b =>
                {
                    b.Navigation("PrescriptionItems");
                });

            modelBuilder.Entity("Domain.Models.Room", b =>
                {
                    b.Navigation("Beds");
                });

            modelBuilder.Entity("Domain.Models.Users.Patient", b =>
                {
                    b.Navigation("ClinicPatientRecord");

                    b.Navigation("IndoorPatientRecord");
                });
#pragma warning restore 612, 618
        }
    }
}
