// <auto-generated />
using System;
using Domain.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220626181710_BedsSeed")]
    partial class BedsSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("AppointmentCharge")
                        .HasColumnType("real");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AppointmentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("Examined")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Domain.Models.Bed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<bool>("Reserved")
                        .HasColumnType("bit");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Beds");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Number = 1,
                            Reserved = false,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 2,
                            Number = 2,
                            Reserved = false,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 3,
                            Number = 3,
                            Reserved = false,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 4,
                            Number = 4,
                            Reserved = false,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 5,
                            Number = 1,
                            Reserved = false,
                            RoomId = 2
                        },
                        new
                        {
                            Id = 6,
                            Number = 2,
                            Reserved = false,
                            RoomId = 2
                        },
                        new
                        {
                            Id = 7,
                            Number = 1,
                            Reserved = false,
                            RoomId = 3
                        },
                        new
                        {
                            Id = 8,
                            Number = 1,
                            Reserved = false,
                            RoomId = 4
                        },
                        new
                        {
                            Id = 9,
                            Number = 2,
                            Reserved = false,
                            RoomId = 4
                        },
                        new
                        {
                            Id = 10,
                            Number = 3,
                            Reserved = false,
                            RoomId = 4
                        },
                        new
                        {
                            Id = 11,
                            Number = 4,
                            Reserved = false,
                            RoomId = 4
                        },
                        new
                        {
                            Id = 12,
                            Number = 1,
                            Reserved = false,
                            RoomId = 5
                        },
                        new
                        {
                            Id = 13,
                            Number = 2,
                            Reserved = false,
                            RoomId = 5
                        },
                        new
                        {
                            Id = 14,
                            Number = 3,
                            Reserved = false,
                            RoomId = 5
                        },
                        new
                        {
                            Id = 15,
                            Number = 4,
                            Reserved = false,
                            RoomId = 5
                        },
                        new
                        {
                            Id = 16,
                            Number = 1,
                            Reserved = false,
                            RoomId = 6
                        },
                        new
                        {
                            Id = 17,
                            Number = 2,
                            Reserved = false,
                            RoomId = 6
                        },
                        new
                        {
                            Id = 18,
                            Number = 3,
                            Reserved = false,
                            RoomId = 6
                        },
                        new
                        {
                            Id = 19,
                            Number = 4,
                            Reserved = false,
                            RoomId = 6
                        },
                        new
                        {
                            Id = 20,
                            Number = 1,
                            Reserved = false,
                            RoomId = 7
                        },
                        new
                        {
                            Id = 21,
                            Number = 1,
                            Reserved = false,
                            RoomId = 8
                        },
                        new
                        {
                            Id = 22,
                            Number = 2,
                            Reserved = false,
                            RoomId = 8
                        });
                });

            modelBuilder.Entity("Domain.Models.ClinicPatientRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("OralMedicalHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("ClinicPatients");
                });

            modelBuilder.Entity("Domain.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Department_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Department_Name = "paediatrics",
                            IsActive = true,
                            Location = "first floor"
                        },
                        new
                        {
                            Id = 2,
                            Department_Name = "gynaecology",
                            IsActive = true,
                            Location = "first floor"
                        },
                        new
                        {
                            Id = 3,
                            Department_Name = "eye",
                            IsActive = false,
                            Location = "second floor"
                        },
                        new
                        {
                            Id = 4,
                            Department_Name = "orthopaedics",
                            IsActive = true,
                            Location = "third floor"
                        },
                        new
                        {
                            Id = 5,
                            Department_Name = "neurology",
                            IsActive = true,
                            Location = "second floor"
                        },
                        new
                        {
                            Id = 6,
                            Department_Name = "cardiology",
                            IsActive = true,
                            Location = "fourth floor"
                        },
                        new
                        {
                            Id = 7,
                            Department_Name = "dental",
                            IsActive = false,
                            Location = "fourth floor"
                        },
                        new
                        {
                            Id = 8,
                            Department_Name = "ENT",
                            IsActive = true,
                            Location = "third floor"
                        },
                        new
                        {
                            Id = 9,
                            Department_Name = "Labs",
                            IsActive = true,
                            Location = "third floor"
                        },
                        new
                        {
                            Id = 10,
                            Department_Name = "Scan",
                            IsActive = true,
                            Location = "third floor"
                        });
                });

            modelBuilder.Entity("Domain.Models.IndoorPatientRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BedId")
                        .HasColumnType("int");

                    b.Property<string>("CauseOfAdmission")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DischargeDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Disharged")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EnterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OralMedicalHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderdByDoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Recommendation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BedId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("OrderdByDoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RoomId");

                    b.ToTable("IndoorPatients");
                });

            modelBuilder.Entity("Domain.Models.Labs.LabRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TestId");

                    b.ToTable("LabRequests");
                });

            modelBuilder.Entity("Domain.Models.Labs.PatientScan", b =>
                {
                    b.Property<int>("PatientScanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientScanId"), 1L, 1);

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScanDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ScanId")
                        .HasColumnType("int");

                    b.Property<string>("WrittenReport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientScanId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ScanId");

                    b.ToTable("PatientScans");
                });

            modelBuilder.Entity("Domain.Models.Labs.PatientTest", b =>
                {
                    b.Property<int>("PatientTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientTestId"), 1L, 1);

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("PatientTestId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TestId");

                    b.ToTable("PatientTest");
                });

            modelBuilder.Entity("Domain.Models.Labs.Scan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("ScanCharge")
                        .HasColumnType("real");

                    b.Property<string>("ScanName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Scan");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ScanCharge = 100f,
                            ScanName = "Angiography"
                        },
                        new
                        {
                            Id = 2,
                            ScanCharge = 100f,
                            ScanName = "CT"
                        },
                        new
                        {
                            Id = 3,
                            ScanCharge = 100f,
                            ScanName = "Echocardiogram"
                        },
                        new
                        {
                            Id = 4,
                            ScanCharge = 100f,
                            ScanName = "Electrocardiogram (ECG)"
                        },
                        new
                        {
                            Id = 5,
                            ScanCharge = 100f,
                            ScanName = "MRI scan"
                        },
                        new
                        {
                            Id = 6,
                            ScanCharge = 100f,
                            ScanName = "PET scan"
                        },
                        new
                        {
                            Id = 7,
                            ScanCharge = 100f,
                            ScanName = "Ultrasound scan"
                        },
                        new
                        {
                            Id = 8,
                            ScanCharge = 100f,
                            ScanName = "X-ray"
                        });
                });

            modelBuilder.Entity("Domain.Models.Labs.ScanRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("ScanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ScanId");

                    b.ToTable("ScanRequests");
                });

            modelBuilder.Entity("Domain.Models.Labs.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TestCharge")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Tests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CBC",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 2,
                            Name = "ESR",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 3,
                            Name = "LIVER FUNCTION TEST",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 4,
                            Name = "Kidney function test",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 5,
                            Name = "Cholesterol test",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 6,
                            Name = "pituitary gland test",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 7,
                            Name = "H.pylori test",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 8,
                            Name = "thyroid gland report",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 9,
                            Name = "STOOL TEST",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 10,
                            Name = "urine report",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 11,
                            Name = "Pcr",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 12,
                            Name = "Diabetes test",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 13,
                            Name = "esr",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 14,
                            Name = "esr",
                            TestCharge = 100f
                        });
                });

            modelBuilder.Entity("Domain.Models.Labs.TestDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PatientTestId")
                        .HasColumnType("int");

                    b.Property<int>("TestParameterId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TestParameterId");

                    b.ToTable("TestDetails", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("TestDetails");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FieldType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InputPattern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<string>("TestParameterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TestParameters", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("TestParameter");
                });

            modelBuilder.Entity("Domain.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int?>("NurseId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("NurseId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Domain.Models.Prescription", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionId"), 1L, 1);

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Prescription_Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("re_appointement_date")
                        .HasColumnType("datetime2");

                    b.HasKey("PrescriptionId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("PatientId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("Domain.Models.PrescriptionItem", b =>
                {
                    b.Property<int>("PrescriptionItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionItemId"), 1L, 1);

                    b.Property<string>("Dose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Durarion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicineType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medicine_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medicine_concentration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrescriptionId")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionItemId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PrescriptionItems");
                });

            modelBuilder.Entity("Domain.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfBeds")
                        .HasColumnType("int");

                    b.Property<bool>("Reserved")
                        .HasColumnType("bit");

                    b.Property<int>("RoomCharges")
                        .HasColumnType("int");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.Property<string>("RoomType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentId = 1,
                            FloorNumber = 1,
                            NumberOfBeds = 4,
                            Reserved = false,
                            RoomCharges = 120,
                            RoomNumber = 1,
                            RoomType = "common"
                        },
                        new
                        {
                            Id = 2,
                            DepartmentId = 1,
                            FloorNumber = 1,
                            NumberOfBeds = 2,
                            Reserved = false,
                            RoomCharges = 140,
                            RoomNumber = 2,
                            RoomType = "common"
                        },
                        new
                        {
                            Id = 3,
                            DepartmentId = 1,
                            FloorNumber = 1,
                            NumberOfBeds = 1,
                            Reserved = false,
                            RoomCharges = 200,
                            RoomNumber = 3,
                            RoomType = "suite"
                        },
                        new
                        {
                            Id = 4,
                            DepartmentId = 1,
                            FloorNumber = 2,
                            NumberOfBeds = 4,
                            Reserved = false,
                            RoomCharges = 120,
                            RoomNumber = 4,
                            RoomType = "common"
                        },
                        new
                        {
                            Id = 5,
                            DepartmentId = 2,
                            FloorNumber = 2,
                            NumberOfBeds = 4,
                            Reserved = false,
                            RoomCharges = 120,
                            RoomNumber = 5,
                            RoomType = "common"
                        },
                        new
                        {
                            Id = 6,
                            DepartmentId = 2,
                            FloorNumber = 2,
                            NumberOfBeds = 4,
                            Reserved = false,
                            RoomCharges = 120,
                            RoomNumber = 6,
                            RoomType = "common"
                        },
                        new
                        {
                            Id = 7,
                            DepartmentId = 2,
                            FloorNumber = 3,
                            NumberOfBeds = 1,
                            Reserved = false,
                            RoomCharges = 200,
                            RoomNumber = 7,
                            RoomType = "suite"
                        },
                        new
                        {
                            Id = 8,
                            DepartmentId = 1,
                            FloorNumber = 3,
                            NumberOfBeds = 2,
                            Reserved = false,
                            RoomCharges = 140,
                            RoomNumber = 8,
                            RoomType = "common"
                        });
                });

            modelBuilder.Entity("Domain.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DayOfWork")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("TimePerPatient")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Domain.Models.TimeSlot", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("Dayofwork")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("Reserved")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("slot_time")
                        .HasColumnType("time");

                    b.Property<int>("slotnumber")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("DoctorId");

                    b.ToTable("TimeSlots");
                });

            modelBuilder.Entity("Domain.Models.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("Role").HasValue("User");
                });

            modelBuilder.Entity("Domain.Models.VitalSign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("ECG")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.Property<int>("NurseId")
                        .HasColumnType("int");

                    b.Property<int>("Patientid")
                        .HasColumnType("int");

                    b.Property<string>("Pressure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PulseRate")
                        .HasColumnType("int");

                    b.Property<float>("RespirationRate")
                        .HasColumnType("real");

                    b.Property<float>("Temperature")
                        .HasColumnType("real");

                    b.Property<DateTime>("vitals_date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("NoteId");

                    b.HasIndex("NurseId");

                    b.HasIndex("Patientid");

                    b.ToTable("VitalSigns");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestDetailsCategorical", b =>
                {
                    b.HasBaseType("Domain.Models.Labs.TestDetails");

                    b.Property<string>("MeasuredValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("PatientTestId");

                    b.HasDiscriminator().HasValue("Categorical");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestDetailsNumerical", b =>
                {
                    b.HasBaseType("Domain.Models.Labs.TestDetails");

                    b.Property<float>("MeasuredValue")
                        .HasColumnType("real")
                        .HasColumnName("TestDetailsNumerical_MeasuredValue");

                    b.HasIndex("PatientTestId");

                    b.HasDiscriminator().HasValue("Numerical");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestParameterCategorical", b =>
                {
                    b.HasBaseType("Domain.Models.Labs.TestParameter");

                    b.Property<string>("Normalvalue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("TestId");

                    b.HasDiscriminator().HasValue("Categorical");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestParameterNumerical", b =>
                {
                    b.HasBaseType("Domain.Models.Labs.TestParameter");

                    b.Property<float>("Max_Range")
                        .HasColumnType("real");

                    b.Property<float>("Min_Range")
                        .HasColumnType("real");

                    b.HasIndex("TestId");

                    b.HasDiscriminator().HasValue("Numerical");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "Heamoglobin(edta blood)",
                            Unit = "g/dl",
                            Max_Range = 15.5f,
                            Min_Range = 11.5f
                        },
                        new
                        {
                            Id = 2,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "Haematocrit(pcv)",
                            Unit = "%",
                            Max_Range = 45f,
                            Min_Range = 36f
                        },
                        new
                        {
                            Id = 3,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "RBCs count(EDTA Blood)",
                            Unit = "Millions/cmm",
                            Max_Range = 5.2f,
                            Min_Range = 4f
                        },
                        new
                        {
                            Id = 4,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "mcv",
                            Unit = "Fl",
                            Max_Range = 100f,
                            Min_Range = 80f
                        },
                        new
                        {
                            Id = 5,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "mch",
                            Unit = "Pg",
                            Max_Range = 33f,
                            Min_Range = 27f
                        },
                        new
                        {
                            Id = 6,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "mchc",
                            Unit = "g/dl",
                            Max_Range = 37f,
                            Min_Range = 31f
                        },
                        new
                        {
                            Id = 7,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "Rdw-cv",
                            Unit = "%",
                            Max_Range = 15f,
                            Min_Range = 11.5f
                        },
                        new
                        {
                            Id = 8,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "Platelet count (edta blood)",
                            Unit = "Thousands/cmm",
                            Max_Range = 450f,
                            Min_Range = 150f
                        },
                        new
                        {
                            Id = 9,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "Total leucocytic count (edta blood)",
                            Unit = "Thousands/cmm",
                            Max_Range = 11f,
                            Min_Range = 4f
                        },
                        new
                        {
                            Id = 10,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "neutrophis",
                            Unit = "×10^9/l",
                            Max_Range = 7f,
                            Min_Range = 2f
                        },
                        new
                        {
                            Id = 11,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "lymphocytes",
                            Unit = "×10^9/l",
                            Max_Range = 4.8f,
                            Min_Range = 1f
                        },
                        new
                        {
                            Id = 12,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "monocytes",
                            Unit = "×10^9/l",
                            Max_Range = 1f,
                            Min_Range = 0.2f
                        },
                        new
                        {
                            Id = 13,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "eosinophils",
                            Unit = "×10^9/l",
                            Max_Range = 0.45f,
                            Min_Range = 0.1f
                        },
                        new
                        {
                            Id = 14,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "basophils",
                            Unit = "×10^9/l",
                            Max_Range = 0.1f,
                            Min_Range = 0f
                        },
                        new
                        {
                            Id = 15,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 2,
                            TestParameterName = "First hour male",
                            Unit = "mm",
                            Max_Range = 7f,
                            Min_Range = 3f
                        },
                        new
                        {
                            Id = 16,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 2,
                            TestParameterName = "First hour female",
                            Unit = "mm",
                            Max_Range = 12f,
                            Min_Range = 7f
                        },
                        new
                        {
                            Id = 17,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 2,
                            TestParameterName = "Second hour male",
                            Unit = "mm",
                            Max_Range = 15f,
                            Min_Range = 7f
                        },
                        new
                        {
                            Id = 18,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 2,
                            TestParameterName = "Second hour female",
                            Unit = "mm",
                            Max_Range = 17f,
                            Min_Range = 12f
                        },
                        new
                        {
                            Id = 19,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Bilirubin total",
                            Unit = "mg/dl",
                            Max_Range = 1f,
                            Min_Range = 0f
                        },
                        new
                        {
                            Id = 20,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Bilirubin direct",
                            Unit = "mg/dl",
                            Max_Range = 0.3f,
                            Min_Range = 0f
                        },
                        new
                        {
                            Id = 21,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Bilirubin indirect",
                            Unit = "mg/dl",
                            Max_Range = 11.7f,
                            Min_Range = 0f
                        },
                        new
                        {
                            Id = 22,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Sgot(ast)",
                            Unit = "u/i",
                            Max_Range = 0.35f,
                            Min_Range = 0f
                        },
                        new
                        {
                            Id = 23,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Sgpt(alt)",
                            Unit = "u/i",
                            Max_Range = 0.45f,
                            Min_Range = 0f
                        },
                        new
                        {
                            Id = 24,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Alkaline phosphatase",
                            Unit = "u/i",
                            Max_Range = 341f,
                            Min_Range = 124f
                        },
                        new
                        {
                            Id = 25,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Total proten",
                            Unit = "mg/dl",
                            Max_Range = 8.3f,
                            Min_Range = 6.6f
                        },
                        new
                        {
                            Id = 26,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Albumin",
                            Unit = "g/dl",
                            Max_Range = 4.9f,
                            Min_Range = 3.5f
                        },
                        new
                        {
                            Id = 27,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Globulin",
                            Unit = "g/dl",
                            Max_Range = 3.5f,
                            Min_Range = 2.3f
                        },
                        new
                        {
                            Id = 28,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "a/g ration",
                            Unit = "g/dl",
                            Max_Range = 1.56f,
                            Min_Range = 1.25f
                        },
                        new
                        {
                            Id = 29,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Blood urea nitrogen(BUN)",
                            Unit = "mg/dl",
                            Max_Range = 25f,
                            Min_Range = 5f
                        },
                        new
                        {
                            Id = 30,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Creatinine(CRE)",
                            Unit = "mg/dl",
                            Max_Range = 1.4f,
                            Min_Range = 0.3f
                        },
                        new
                        {
                            Id = 31,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Uric acid(UA)",
                            Unit = "mg/dl",
                            Max_Range = 7f,
                            Min_Range = 2.5f
                        },
                        new
                        {
                            Id = 32,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Albumin-globilin in ratio(A/G ratio)",
                            Unit = "mg/dl",
                            Max_Range = 1.8f,
                            Min_Range = 1f
                        },
                        new
                        {
                            Id = 33,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "creatinine Clearance/24 hrs urine (CC) Male",
                            Unit = "ml/min",
                            Max_Range = 135f,
                            Min_Range = 71f
                        },
                        new
                        {
                            Id = 34,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "creatinine Clearance/24 hrs urine (CC) Female",
                            Unit = "ml/min",
                            Max_Range = 116f,
                            Min_Range = 78f
                        },
                        new
                        {
                            Id = 35,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Renin",
                            Unit = "pg/ml/hr",
                            Max_Range = 3.95f,
                            Min_Range = 0.15f
                        },
                        new
                        {
                            Id = 36,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Creatinine urine",
                            Unit = "mg/dl",
                            Max_Range = 250f,
                            Min_Range = 60f
                        },
                        new
                        {
                            Id = 37,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Natrium(Na)",
                            Unit = "meq/l",
                            Max_Range = 145f,
                            Min_Range = 135f
                        },
                        new
                        {
                            Id = 38,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Potassium (K)",
                            Unit = "meq/l",
                            Max_Range = 4.5f,
                            Min_Range = 3.4f
                        },
                        new
                        {
                            Id = 39,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Calcium (Ca)",
                            Unit = "mg/dl",
                            Max_Range = 10.6f,
                            Min_Range = 8.4f
                        },
                        new
                        {
                            Id = 40,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Phosphorus (IP)",
                            Unit = "mg/dl",
                            Max_Range = 4.7f,
                            Min_Range = 2.1f
                        },
                        new
                        {
                            Id = 41,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Alkaline phosphatase (ALP)",
                            Unit = "U/L",
                            Max_Range = 110f,
                            Min_Range = 27f
                        });
                });

            modelBuilder.Entity("Domain.Models.Users.Admin", b =>
                {
                    b.HasBaseType("Domain.Models.Users.User");

                    b.HasIndex("DepartmentId");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("Domain.Models.Users.Doctor", b =>
                {
                    b.HasBaseType("Domain.Models.Users.User");

                    b.Property<string>("DocDegree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocSpecialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int")
                        .HasColumnName("Doctor_IndoorPatientRecordId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasDiscriminator().HasValue("Doctor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "fayoum",
                            Age = 40,
                            BloodType = "B+",
                            CreatedDtm = new DateTime(2022, 6, 26, 20, 17, 5, 543, DateTimeKind.Local).AddTicks(1967),
                            DepartmentId = 1,
                            FirstName = "Sayed",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "Taha",
                            Mail = "sayed.taha@gmail.com",
                            NationalId = "27030351876321",
                            PasswordHash = new byte[] { 208, 106, 17, 4, 62, 91, 54, 31, 219, 111, 102, 233, 70, 105, 251, 100, 51, 137, 10, 198, 103, 213, 206, 118, 136, 121, 223, 48, 102, 57, 38, 15, 63, 65, 120, 162, 74, 199, 115, 38, 206, 5, 122, 134, 139, 18, 89, 12, 157, 96, 119, 46, 231, 114, 233, 32, 158, 188, 130, 134, 56, 138, 161, 244 },
                            PasswordSalt = new byte[] { 57, 96, 10, 85, 192, 186, 54, 81, 116, 60, 151, 13, 163, 115, 173, 188, 199, 137, 100, 245, 240, 142, 173, 107, 245, 221, 63, 175, 64, 72, 249, 214, 245, 141, 175, 21, 21, 122, 89, 108, 8, 202, 236, 118, 0, 122, 141, 204, 176, 145, 220, 97, 244, 240, 80, 215, 140, 217, 84, 25, 27, 146, 90, 197, 5, 95, 215, 81, 107, 243, 183, 115, 26, 86, 6, 188, 70, 188, 161, 165, 167, 1, 101, 137, 121, 37, 38, 219, 39, 152, 2, 57, 132, 135, 63, 50, 138, 187, 187, 64, 218, 215, 179, 55, 204, 192, 248, 232, 54, 148, 9, 208, 249, 125, 80, 106, 28, 14, 66, 163, 60, 66, 47, 148, 97, 193, 78, 102 },
                            PhoneNumber = "01113436425",
                            Role = "Doctor",
                            UserName = "sayed_taha",
                            DocDegree = "PHD",
                            DocSpecialization = "AI"
                        },
                        new
                        {
                            Id = 2,
                            Address = "fayoum",
                            Age = 37,
                            BloodType = "A+",
                            CreatedDtm = new DateTime(2022, 6, 26, 20, 17, 5, 543, DateTimeKind.Local).AddTicks(2003),
                            DepartmentId = 1,
                            FirstName = "Mohamed",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "Hamdy",
                            Mail = "mohamed.hamdy@gmail.com",
                            NationalId = "27030351876321",
                            PasswordHash = new byte[] { 24, 220, 29, 51, 4, 241, 172, 21, 234, 2, 246, 96, 253, 188, 98, 138, 7, 121, 7, 97, 145, 22, 132, 225, 50, 180, 110, 94, 185, 2, 13, 248, 71, 147, 225, 123, 171, 144, 41, 151, 201, 58, 105, 252, 33, 223, 183, 3, 127, 150, 99, 38, 141, 111, 206, 18, 112, 206, 130, 103, 61, 97, 18, 1 },
                            PasswordSalt = new byte[] { 196, 153, 197, 11, 244, 19, 240, 243, 113, 246, 243, 194, 16, 1, 253, 149, 171, 221, 15, 237, 133, 204, 244, 26, 167, 192, 209, 88, 193, 145, 24, 164, 108, 244, 180, 56, 31, 118, 221, 173, 147, 207, 240, 108, 123, 88, 200, 243, 202, 65, 2, 52, 254, 139, 198, 3, 43, 179, 255, 126, 161, 128, 57, 128, 180, 134, 201, 49, 45, 247, 25, 123, 166, 167, 190, 220, 11, 65, 43, 149, 178, 196, 66, 211, 156, 141, 76, 123, 46, 164, 225, 207, 105, 108, 238, 29, 30, 133, 140, 20, 19, 27, 82, 76, 42, 220, 70, 88, 85, 154, 67, 17, 35, 51, 88, 57, 81, 196, 64, 151, 31, 226, 212, 126, 42, 206, 194, 100 },
                            PhoneNumber = "01113436425",
                            Role = "Doctor",
                            UserName = "mohamed_hamdy",
                            DocDegree = "PHD",
                            DocSpecialization = "AI"
                        },
                        new
                        {
                            Id = 3,
                            Address = "fayoum",
                            Age = 50,
                            BloodType = "AB+",
                            CreatedDtm = new DateTime(2022, 6, 26, 20, 17, 5, 543, DateTimeKind.Local).AddTicks(2012),
                            DepartmentId = 2,
                            FirstName = "Amr",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "Refaat",
                            Mail = "amr.refaat@gmail.com",
                            NationalId = "27030351876321",
                            PasswordHash = new byte[] { 111, 147, 197, 121, 50, 102, 20, 218, 117, 94, 173, 43, 134, 13, 170, 29, 159, 84, 195, 179, 119, 152, 156, 122, 219, 237, 184, 184, 205, 68, 171, 79, 175, 176, 25, 122, 3, 97, 202, 38, 171, 190, 33, 188, 136, 170, 124, 179, 61, 154, 213, 103, 57, 223, 158, 24, 78, 100, 117, 1, 124, 84, 81, 25 },
                            PasswordSalt = new byte[] { 109, 32, 109, 140, 32, 42, 30, 165, 79, 30, 175, 242, 100, 177, 70, 223, 24, 27, 224, 202, 29, 75, 9, 142, 150, 188, 46, 83, 5, 223, 107, 35, 158, 2, 144, 249, 178, 222, 111, 171, 67, 219, 11, 104, 249, 115, 152, 50, 64, 150, 100, 2, 254, 253, 134, 159, 6, 219, 6, 130, 190, 150, 24, 7, 18, 45, 166, 104, 41, 141, 14, 16, 131, 65, 74, 148, 163, 110, 212, 61, 255, 128, 55, 185, 31, 25, 109, 235, 252, 226, 1, 150, 44, 188, 156, 243, 150, 118, 127, 248, 73, 45, 172, 126, 125, 54, 81, 34, 22, 22, 43, 27, 223, 25, 206, 209, 174, 125, 214, 152, 148, 66, 4, 139, 178, 213, 189, 245 },
                            PhoneNumber = "01113436425",
                            Role = "Doctor",
                            UserName = "amr_refaat",
                            DocDegree = "PHD",
                            DocSpecialization = "AI"
                        });
                });

            modelBuilder.Entity("Domain.Models.Users.Nurse", b =>
                {
                    b.HasBaseType("Domain.Models.Users.User");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<string>("NurseDegree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NurseSpecialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasDiscriminator().HasValue("Nurse");
                });

            modelBuilder.Entity("Domain.Models.Users.Patient", b =>
                {
                    b.HasBaseType("Domain.Models.Users.User");

                    b.HasIndex("DepartmentId");

                    b.HasDiscriminator().HasValue("Patient");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            Address = "fayoum",
                            Age = 40,
                            BloodType = "B+",
                            CreatedDtm = new DateTime(2022, 6, 26, 20, 17, 5, 543, DateTimeKind.Local).AddTicks(2523),
                            DepartmentId = 1,
                            FirstName = "Sayed",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "Taha",
                            Mail = "sayed.taha@gmail.com",
                            NationalId = "27030351876321",
                            PasswordHash = new byte[] { 202, 112, 214, 235, 250, 109, 213, 47, 56, 169, 243, 154, 120, 219, 248, 2, 38, 242, 67, 82, 119, 144, 227, 185, 199, 146, 196, 174, 8, 46, 101, 132, 229, 214, 79, 5, 147, 253, 20, 75, 164, 133, 120, 75, 28, 5, 228, 129, 146, 78, 178, 69, 195, 245, 131, 135, 123, 109, 211, 92, 134, 224, 103, 52 },
                            PasswordSalt = new byte[] { 5, 242, 152, 24, 89, 38, 255, 25, 53, 41, 169, 232, 238, 211, 25, 174, 192, 249, 170, 188, 244, 203, 72, 245, 158, 76, 7, 94, 215, 207, 222, 61, 190, 180, 129, 13, 151, 23, 65, 94, 128, 157, 75, 7, 143, 68, 98, 252, 145, 144, 143, 213, 53, 236, 195, 103, 215, 204, 54, 159, 237, 11, 188, 101, 217, 43, 49, 95, 231, 113, 37, 171, 232, 231, 87, 5, 171, 9, 35, 37, 15, 47, 76, 23, 163, 170, 142, 15, 196, 65, 8, 164, 0, 16, 56, 150, 169, 233, 188, 45, 201, 122, 138, 254, 2, 92, 130, 183, 190, 226, 148, 247, 45, 155, 219, 119, 192, 76, 245, 138, 113, 228, 96, 5, 14, 115, 208, 166 },
                            PhoneNumber = "01113436425",
                            Role = "Patient",
                            UserName = "patient1"
                        },
                        new
                        {
                            Id = 5,
                            Address = "fayoum",
                            Age = 37,
                            BloodType = "O+",
                            CreatedDtm = new DateTime(2022, 6, 26, 20, 17, 5, 543, DateTimeKind.Local).AddTicks(2533),
                            DepartmentId = 1,
                            FirstName = "Mohamed",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "Hamdy",
                            Mail = "mohamed.hamdy@gmail.com",
                            NationalId = "27030351876321",
                            PasswordHash = new byte[] { 19, 169, 88, 173, 196, 32, 98, 221, 224, 115, 230, 151, 58, 198, 44, 195, 163, 46, 19, 31, 173, 157, 58, 71, 200, 214, 132, 157, 124, 162, 24, 217, 183, 183, 161, 84, 238, 35, 5, 89, 199, 3, 10, 217, 155, 195, 172, 132, 180, 62, 206, 127, 167, 218, 101, 201, 220, 208, 195, 151, 84, 229, 219, 67 },
                            PasswordSalt = new byte[] { 86, 229, 182, 24, 39, 150, 237, 217, 106, 3, 222, 156, 182, 46, 191, 199, 79, 174, 93, 34, 191, 148, 63, 62, 196, 239, 2, 188, 70, 246, 36, 52, 195, 170, 235, 63, 142, 189, 73, 251, 127, 28, 149, 50, 170, 108, 38, 106, 72, 171, 70, 167, 152, 196, 25, 163, 248, 48, 239, 10, 44, 64, 15, 73, 173, 180, 65, 113, 164, 230, 203, 146, 102, 58, 252, 33, 7, 233, 24, 201, 22, 225, 236, 8, 232, 173, 60, 108, 117, 141, 212, 42, 23, 80, 16, 199, 248, 49, 118, 231, 42, 213, 97, 149, 120, 254, 35, 28, 45, 186, 254, 63, 147, 60, 23, 156, 120, 136, 152, 18, 238, 228, 136, 226, 104, 161, 161, 63 },
                            PhoneNumber = "01113436425",
                            Role = "Patient",
                            UserName = "patient2"
                        },
                        new
                        {
                            Id = 6,
                            Address = "fayoum",
                            Age = 50,
                            BloodType = "O-",
                            CreatedDtm = new DateTime(2022, 6, 26, 20, 17, 5, 543, DateTimeKind.Local).AddTicks(2541),
                            FirstName = "Amr",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "Refaat",
                            Mail = "amr.refaat@gmail.com",
                            NationalId = "27030351876321",
                            PasswordHash = new byte[] { 208, 115, 233, 60, 244, 48, 69, 62, 36, 51, 151, 191, 48, 84, 36, 18, 22, 3, 53, 176, 140, 127, 57, 138, 153, 109, 71, 24, 87, 30, 189, 82, 220, 49, 77, 62, 69, 141, 105, 6, 221, 94, 144, 241, 134, 223, 220, 91, 212, 142, 70, 253, 0, 6, 230, 129, 181, 69, 96, 78, 216, 164, 241, 110 },
                            PasswordSalt = new byte[] { 33, 62, 82, 194, 133, 229, 219, 57, 23, 185, 29, 11, 78, 212, 78, 203, 41, 220, 23, 111, 70, 104, 194, 94, 179, 149, 52, 225, 115, 64, 210, 9, 237, 195, 178, 64, 52, 41, 82, 55, 10, 47, 243, 89, 33, 225, 175, 102, 82, 19, 215, 130, 82, 203, 208, 151, 120, 165, 255, 243, 249, 53, 185, 229, 38, 77, 203, 227, 76, 53, 242, 113, 184, 229, 111, 243, 101, 210, 18, 188, 89, 228, 83, 131, 64, 48, 4, 171, 53, 189, 90, 167, 231, 15, 96, 140, 170, 64, 196, 179, 175, 112, 4, 88, 20, 21, 158, 213, 255, 103, 70, 140, 98, 59, 187, 103, 133, 43, 231, 118, 249, 104, 55, 13, 2, 206, 100, 238 },
                            PhoneNumber = "01113436425",
                            Role = "Patient",
                            UserName = "patient3"
                        });
                });

            modelBuilder.Entity("Domain.Models.Users.Receptionist", b =>
                {
                    b.HasBaseType("Domain.Models.Users.User");

                    b.HasIndex("DepartmentId");

                    b.HasDiscriminator().HasValue("Receptionist");
                });

            modelBuilder.Entity("Domain.Models.Appointment", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Models.Bed", b =>
                {
                    b.HasOne("Domain.Models.Room", "Room")
                        .WithMany("Beds")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Domain.Models.ClinicPatientRecord", b =>
                {
                    b.HasOne("Domain.Models.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.Patient", null)
                        .WithMany("ClinicPatientRecord")
                        .HasForeignKey("PatientId");

                    b.HasOne("Domain.Models.Prescription", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Department");

                    b.Navigation("Doctor");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("Domain.Models.IndoorPatientRecord", b =>
                {
                    b.HasOne("Domain.Models.Bed", "Bed")
                        .WithMany()
                        .HasForeignKey("BedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.Doctor", "OrderdByDoctor")
                        .WithMany()
                        .HasForeignKey("OrderdByDoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.Patient", "Patient")
                        .WithMany("IndoorPatientRecord")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bed");

                    b.Navigation("Department");

                    b.Navigation("OrderdByDoctor");

                    b.Navigation("Patient");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Domain.Models.Labs.LabRequest", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", "IndoorPatientRecord")
                        .WithMany()
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Labs.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("IndoorPatientRecord");

                    b.Navigation("Patient");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Domain.Models.Labs.PatientScan", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", "IndoorPatientRecord")
                        .WithMany("Scans")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Labs.Scan", "Scan")
                        .WithMany()
                        .HasForeignKey("ScanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("IndoorPatientRecord");

                    b.Navigation("Patient");

                    b.Navigation("Scan");
                });

            modelBuilder.Entity("Domain.Models.Labs.PatientTest", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", "IndoorPatientRecord")
                        .WithMany("Tests")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Labs.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("IndoorPatientRecord");

                    b.Navigation("Patient");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Domain.Models.Labs.ScanRequest", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", "IndoorPatientRecord")
                        .WithMany()
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Labs.Scan", "Scan")
                        .WithMany()
                        .HasForeignKey("ScanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("IndoorPatientRecord");

                    b.Navigation("Patient");

                    b.Navigation("Scan");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestDetails", b =>
                {
                    b.HasOne("Domain.Models.Labs.TestParameter", "TestParameter")
                        .WithMany()
                        .HasForeignKey("TestParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestParameter");
                });

            modelBuilder.Entity("Domain.Models.Note", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", null)
                        .WithMany("Notes")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Users.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId");

                    b.Navigation("Doctor");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("Domain.Models.Prescription", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.IndoorPatientRecord", null)
                        .WithMany("Prescriptions")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Users.Patient", "patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("patient");
                });

            modelBuilder.Entity("Domain.Models.PrescriptionItem", b =>
                {
                    b.HasOne("Domain.Models.Prescription", null)
                        .WithMany("PrescriptionItems")
                        .HasForeignKey("PrescriptionId");
                });

            modelBuilder.Entity("Domain.Models.Room", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.Schedule", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Domain.Models.TimeSlot", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Domain.Models.VitalSign", b =>
                {
                    b.HasOne("Domain.Models.IndoorPatientRecord", null)
                        .WithMany("VitalSigns")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Note", "Note")
                        .WithMany()
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("Patientid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");

                    b.Navigation("Nurse");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestDetailsCategorical", b =>
                {
                    b.HasOne("Domain.Models.Labs.PatientTest", "PatientTest")
                        .WithMany("CategoricalDetails")
                        .HasForeignKey("PatientTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientTest");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestDetailsNumerical", b =>
                {
                    b.HasOne("Domain.Models.Labs.PatientTest", "PatientTest")
                        .WithMany("NumericalDetails")
                        .HasForeignKey("PatientTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientTest");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestParameterCategorical", b =>
                {
                    b.HasOne("Domain.Models.Labs.Test", "Test")
                        .WithMany("CategoricalParamters")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestParameterNumerical", b =>
                {
                    b.HasOne("Domain.Models.Labs.Test", "Test")
                        .WithMany("NumericalParamters")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Domain.Models.Users.Admin", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.Users.Doctor", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany("Doctors")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", null)
                        .WithMany("Doctors")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.Users.Nurse", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany("Nurses")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", null)
                        .WithMany("Nurses")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.Users.Patient", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany("Patients")
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.Users.Receptionist", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.Department", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Nurses");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Domain.Models.IndoorPatientRecord", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Notes");

                    b.Navigation("Nurses");

                    b.Navigation("Prescriptions");

                    b.Navigation("Scans");

                    b.Navigation("Tests");

                    b.Navigation("VitalSigns");
                });

            modelBuilder.Entity("Domain.Models.Labs.PatientTest", b =>
                {
                    b.Navigation("CategoricalDetails");

                    b.Navigation("NumericalDetails");
                });

            modelBuilder.Entity("Domain.Models.Labs.Test", b =>
                {
                    b.Navigation("CategoricalParamters");

                    b.Navigation("NumericalParamters");
                });

            modelBuilder.Entity("Domain.Models.Prescription", b =>
                {
                    b.Navigation("PrescriptionItems");
                });

            modelBuilder.Entity("Domain.Models.Room", b =>
                {
                    b.Navigation("Beds");
                });

            modelBuilder.Entity("Domain.Models.Users.Patient", b =>
                {
                    b.Navigation("ClinicPatientRecord");

                    b.Navigation("IndoorPatientRecord");
                });
#pragma warning restore 612, 618
        }
    }
}
