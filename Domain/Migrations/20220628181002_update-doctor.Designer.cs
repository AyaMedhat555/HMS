// <auto-generated />
using System;
using Domain.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220628181002_update-doctor")]
    partial class updatedoctor
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("AppointmentCharge")
                        .HasColumnType("real");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AppointmentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("Examined")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Domain.Models.Bed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<bool>("Reserved")
                        .HasColumnType("bit");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Beds");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Number = 1,
                            Reserved = false,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 2,
                            Number = 2,
                            Reserved = false,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 3,
                            Number = 3,
                            Reserved = false,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 4,
                            Number = 4,
                            Reserved = false,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 5,
                            Number = 1,
                            Reserved = false,
                            RoomId = 2
                        },
                        new
                        {
                            Id = 6,
                            Number = 2,
                            Reserved = false,
                            RoomId = 2
                        },
                        new
                        {
                            Id = 7,
                            Number = 1,
                            Reserved = false,
                            RoomId = 3
                        },
                        new
                        {
                            Id = 8,
                            Number = 1,
                            Reserved = false,
                            RoomId = 4
                        },
                        new
                        {
                            Id = 9,
                            Number = 2,
                            Reserved = false,
                            RoomId = 4
                        },
                        new
                        {
                            Id = 10,
                            Number = 3,
                            Reserved = false,
                            RoomId = 4
                        },
                        new
                        {
                            Id = 11,
                            Number = 4,
                            Reserved = false,
                            RoomId = 4
                        },
                        new
                        {
                            Id = 12,
                            Number = 1,
                            Reserved = false,
                            RoomId = 5
                        },
                        new
                        {
                            Id = 13,
                            Number = 2,
                            Reserved = false,
                            RoomId = 5
                        },
                        new
                        {
                            Id = 14,
                            Number = 3,
                            Reserved = false,
                            RoomId = 5
                        },
                        new
                        {
                            Id = 15,
                            Number = 4,
                            Reserved = false,
                            RoomId = 5
                        },
                        new
                        {
                            Id = 16,
                            Number = 1,
                            Reserved = false,
                            RoomId = 6
                        },
                        new
                        {
                            Id = 17,
                            Number = 2,
                            Reserved = false,
                            RoomId = 6
                        },
                        new
                        {
                            Id = 18,
                            Number = 3,
                            Reserved = false,
                            RoomId = 6
                        },
                        new
                        {
                            Id = 19,
                            Number = 4,
                            Reserved = false,
                            RoomId = 6
                        },
                        new
                        {
                            Id = 20,
                            Number = 1,
                            Reserved = false,
                            RoomId = 7
                        },
                        new
                        {
                            Id = 21,
                            Number = 1,
                            Reserved = false,
                            RoomId = 8
                        },
                        new
                        {
                            Id = 22,
                            Number = 2,
                            Reserved = false,
                            RoomId = 8
                        });
                });

            modelBuilder.Entity("Domain.Models.ClinicPatientRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("OralMedicalHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("ClinicPatients");
                });

            modelBuilder.Entity("Domain.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Department_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("clinicalDepartment")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Department_Name = "paediatrics",
                            IsActive = true,
                            Location = "first floor",
                            clinicalDepartment = false
                        },
                        new
                        {
                            Id = 2,
                            Department_Name = "gynaecology",
                            IsActive = true,
                            Location = "first floor",
                            clinicalDepartment = false
                        },
                        new
                        {
                            Id = 3,
                            Department_Name = "eye",
                            IsActive = false,
                            Location = "second floor",
                            clinicalDepartment = false
                        },
                        new
                        {
                            Id = 4,
                            Department_Name = "orthopaedics",
                            IsActive = true,
                            Location = "third floor",
                            clinicalDepartment = false
                        },
                        new
                        {
                            Id = 5,
                            Department_Name = "neurology",
                            IsActive = true,
                            Location = "second floor",
                            clinicalDepartment = false
                        },
                        new
                        {
                            Id = 6,
                            Department_Name = "cardiology",
                            IsActive = true,
                            Location = "fourth floor",
                            clinicalDepartment = false
                        },
                        new
                        {
                            Id = 7,
                            Department_Name = "dental",
                            IsActive = false,
                            Location = "fourth floor",
                            clinicalDepartment = false
                        },
                        new
                        {
                            Id = 8,
                            Department_Name = "ENT",
                            IsActive = true,
                            Location = "third floor",
                            clinicalDepartment = false
                        },
                        new
                        {
                            Id = 9,
                            Department_Name = "Labs",
                            IsActive = true,
                            Location = "third floor",
                            clinicalDepartment = false
                        },
                        new
                        {
                            Id = 10,
                            Department_Name = "Scan",
                            IsActive = true,
                            Location = "third floor",
                            clinicalDepartment = false
                        });
                });

            modelBuilder.Entity("Domain.Models.IndoorPatientRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BedId")
                        .HasColumnType("int");

                    b.Property<string>("CauseOfAdmission")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DischargeDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Disharged")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EnterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OralMedicalHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderdByDoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Recommendation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BedId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("OrderdByDoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RoomId");

                    b.ToTable("IndoorPatients");
                });

            modelBuilder.Entity("Domain.Models.Labs.LabRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TestId");

                    b.ToTable("LabRequests");
                });

            modelBuilder.Entity("Domain.Models.Labs.PatientScan", b =>
                {
                    b.Property<int>("PatientScanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientScanId"), 1L, 1);

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScanDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ScanId")
                        .HasColumnType("int");

                    b.Property<string>("WrittenReport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientScanId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ScanId");

                    b.ToTable("PatientScans");
                });

            modelBuilder.Entity("Domain.Models.Labs.PatientTest", b =>
                {
                    b.Property<int>("PatientTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientTestId"), 1L, 1);

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("PatientTestId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TestId");

                    b.ToTable("PatientTest");
                });

            modelBuilder.Entity("Domain.Models.Labs.Scan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("ScanCharge")
                        .HasColumnType("real");

                    b.Property<string>("ScanName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Scan");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ScanCharge = 100f,
                            ScanName = "Angiography"
                        },
                        new
                        {
                            Id = 2,
                            ScanCharge = 100f,
                            ScanName = "CT"
                        },
                        new
                        {
                            Id = 3,
                            ScanCharge = 100f,
                            ScanName = "Echocardiogram"
                        },
                        new
                        {
                            Id = 4,
                            ScanCharge = 100f,
                            ScanName = "Electrocardiogram (ECG)"
                        },
                        new
                        {
                            Id = 5,
                            ScanCharge = 100f,
                            ScanName = "MRI scan"
                        },
                        new
                        {
                            Id = 6,
                            ScanCharge = 100f,
                            ScanName = "PET scan"
                        },
                        new
                        {
                            Id = 7,
                            ScanCharge = 100f,
                            ScanName = "Ultrasound scan"
                        },
                        new
                        {
                            Id = 8,
                            ScanCharge = 100f,
                            ScanName = "X-ray"
                        });
                });

            modelBuilder.Entity("Domain.Models.Labs.ScanRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("ScanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ScanId");

                    b.ToTable("ScanRequests");
                });

            modelBuilder.Entity("Domain.Models.Labs.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TestCharge")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Tests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CBC",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 2,
                            Name = "ESR",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 3,
                            Name = "LIVER FUNCTION TEST",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 4,
                            Name = "Kidney function test",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 5,
                            Name = "Cholesterol test",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 6,
                            Name = "pituitary gland test",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 7,
                            Name = "H.pylori test",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 8,
                            Name = "thyroid gland report",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 9,
                            Name = "STOOL TEST",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 10,
                            Name = "urine report",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 11,
                            Name = "Pcr",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 12,
                            Name = "Diabetes test",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 13,
                            Name = "esr",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 14,
                            Name = "esr",
                            TestCharge = 100f
                        });
                });

            modelBuilder.Entity("Domain.Models.Labs.TestDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PatientTestId")
                        .HasColumnType("int");

                    b.Property<int>("TestParameterId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TestParameterId");

                    b.ToTable("TestDetails", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("TestDetails");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FieldType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InputPattern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<string>("TestParameterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TestParameters", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("TestParameter");
                });

            modelBuilder.Entity("Domain.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int?>("NurseId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("NurseId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Domain.Models.Prescription", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionId"), 1L, 1);

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Prescription_Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("re_appointement_date")
                        .HasColumnType("datetime2");

                    b.HasKey("PrescriptionId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("PatientId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("Domain.Models.PrescriptionItem", b =>
                {
                    b.Property<int>("PrescriptionItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionItemId"), 1L, 1);

                    b.Property<string>("Dose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Durarion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicineType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medicine_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medicine_concentration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrescriptionId")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionItemId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PrescriptionItems");
                });

            modelBuilder.Entity("Domain.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfBeds")
                        .HasColumnType("int");

                    b.Property<bool>("Reserved")
                        .HasColumnType("bit");

                    b.Property<int>("RoomCharges")
                        .HasColumnType("int");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.Property<string>("RoomType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentId = 1,
                            FloorNumber = 1,
                            NumberOfBeds = 4,
                            Reserved = false,
                            RoomCharges = 120,
                            RoomNumber = 1,
                            RoomType = "common"
                        },
                        new
                        {
                            Id = 2,
                            DepartmentId = 1,
                            FloorNumber = 1,
                            NumberOfBeds = 2,
                            Reserved = false,
                            RoomCharges = 140,
                            RoomNumber = 2,
                            RoomType = "common"
                        },
                        new
                        {
                            Id = 3,
                            DepartmentId = 1,
                            FloorNumber = 1,
                            NumberOfBeds = 1,
                            Reserved = false,
                            RoomCharges = 200,
                            RoomNumber = 3,
                            RoomType = "suite"
                        },
                        new
                        {
                            Id = 4,
                            DepartmentId = 1,
                            FloorNumber = 2,
                            NumberOfBeds = 4,
                            Reserved = false,
                            RoomCharges = 120,
                            RoomNumber = 4,
                            RoomType = "common"
                        },
                        new
                        {
                            Id = 5,
                            DepartmentId = 2,
                            FloorNumber = 2,
                            NumberOfBeds = 4,
                            Reserved = false,
                            RoomCharges = 120,
                            RoomNumber = 5,
                            RoomType = "common"
                        },
                        new
                        {
                            Id = 6,
                            DepartmentId = 2,
                            FloorNumber = 2,
                            NumberOfBeds = 4,
                            Reserved = false,
                            RoomCharges = 120,
                            RoomNumber = 6,
                            RoomType = "common"
                        },
                        new
                        {
                            Id = 7,
                            DepartmentId = 2,
                            FloorNumber = 3,
                            NumberOfBeds = 1,
                            Reserved = false,
                            RoomCharges = 200,
                            RoomNumber = 7,
                            RoomType = "suite"
                        },
                        new
                        {
                            Id = 8,
                            DepartmentId = 1,
                            FloorNumber = 3,
                            NumberOfBeds = 2,
                            Reserved = false,
                            RoomCharges = 140,
                            RoomNumber = 8,
                            RoomType = "common"
                        });
                });

            modelBuilder.Entity("Domain.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DayOfWork")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("TimePerPatient")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Domain.Models.TimeSlot", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("Dayofwork")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("Reserved")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("slot_time")
                        .HasColumnType("time");

                    b.Property<int>("slotnumber")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("DoctorId");

                    b.ToTable("TimeSlots");
                });

            modelBuilder.Entity("Domain.Models.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("Role").HasValue("User");
                });

            modelBuilder.Entity("Domain.Models.VitalSign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("ECG")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.Property<int>("NurseId")
                        .HasColumnType("int");

                    b.Property<int>("Patientid")
                        .HasColumnType("int");

                    b.Property<string>("Pressure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PulseRate")
                        .HasColumnType("int");

                    b.Property<float>("RespirationRate")
                        .HasColumnType("real");

                    b.Property<float>("Temperature")
                        .HasColumnType("real");

                    b.Property<DateTime>("vitals_date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("NoteId");

                    b.HasIndex("NurseId");

                    b.HasIndex("Patientid");

                    b.ToTable("VitalSigns");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestDetailsCategorical", b =>
                {
                    b.HasBaseType("Domain.Models.Labs.TestDetails");

                    b.Property<string>("MeasuredValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("PatientTestId");

                    b.HasDiscriminator().HasValue("Categorical");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestDetailsNumerical", b =>
                {
                    b.HasBaseType("Domain.Models.Labs.TestDetails");

                    b.Property<float>("MeasuredValue")
                        .HasColumnType("real")
                        .HasColumnName("TestDetailsNumerical_MeasuredValue");

                    b.HasIndex("PatientTestId");

                    b.HasDiscriminator().HasValue("Numerical");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestParameterCategorical", b =>
                {
                    b.HasBaseType("Domain.Models.Labs.TestParameter");

                    b.Property<string>("Normalvalue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("TestId");

                    b.HasDiscriminator().HasValue("Categorical");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestParameterNumerical", b =>
                {
                    b.HasBaseType("Domain.Models.Labs.TestParameter");

                    b.Property<float>("Max_Range")
                        .HasColumnType("real");

                    b.Property<float>("Min_Range")
                        .HasColumnType("real");

                    b.HasIndex("TestId");

                    b.HasDiscriminator().HasValue("Numerical");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "Heamoglobin(edta blood)",
                            Unit = "g/dl",
                            Max_Range = 15.5f,
                            Min_Range = 11.5f
                        },
                        new
                        {
                            Id = 2,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "Haematocrit(pcv)",
                            Unit = "%",
                            Max_Range = 45f,
                            Min_Range = 36f
                        },
                        new
                        {
                            Id = 3,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "RBCs count(EDTA Blood)",
                            Unit = "Millions/cmm",
                            Max_Range = 5.2f,
                            Min_Range = 4f
                        },
                        new
                        {
                            Id = 4,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "mcv",
                            Unit = "Fl",
                            Max_Range = 100f,
                            Min_Range = 80f
                        },
                        new
                        {
                            Id = 5,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "mch",
                            Unit = "Pg",
                            Max_Range = 33f,
                            Min_Range = 27f
                        },
                        new
                        {
                            Id = 6,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "mchc",
                            Unit = "g/dl",
                            Max_Range = 37f,
                            Min_Range = 31f
                        },
                        new
                        {
                            Id = 7,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "Rdw-cv",
                            Unit = "%",
                            Max_Range = 15f,
                            Min_Range = 11.5f
                        },
                        new
                        {
                            Id = 8,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "Platelet count (edta blood)",
                            Unit = "Thousands/cmm",
                            Max_Range = 450f,
                            Min_Range = 150f
                        },
                        new
                        {
                            Id = 9,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "Total leucocytic count (edta blood)",
                            Unit = "Thousands/cmm",
                            Max_Range = 11f,
                            Min_Range = 4f
                        },
                        new
                        {
                            Id = 10,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "neutrophis",
                            Unit = "×10^9/l",
                            Max_Range = 7f,
                            Min_Range = 2f
                        },
                        new
                        {
                            Id = 11,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "lymphocytes",
                            Unit = "×10^9/l",
                            Max_Range = 4.8f,
                            Min_Range = 1f
                        },
                        new
                        {
                            Id = 12,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "monocytes",
                            Unit = "×10^9/l",
                            Max_Range = 1f,
                            Min_Range = 0.2f
                        },
                        new
                        {
                            Id = 13,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "eosinophils",
                            Unit = "×10^9/l",
                            Max_Range = 0.45f,
                            Min_Range = 0.1f
                        },
                        new
                        {
                            Id = 14,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "basophils",
                            Unit = "×10^9/l",
                            Max_Range = 0.1f,
                            Min_Range = 0f
                        },
                        new
                        {
                            Id = 15,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 2,
                            TestParameterName = "First hour male",
                            Unit = "mm",
                            Max_Range = 7f,
                            Min_Range = 3f
                        },
                        new
                        {
                            Id = 16,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 2,
                            TestParameterName = "First hour female",
                            Unit = "mm",
                            Max_Range = 12f,
                            Min_Range = 7f
                        },
                        new
                        {
                            Id = 17,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 2,
                            TestParameterName = "Second hour male",
                            Unit = "mm",
                            Max_Range = 15f,
                            Min_Range = 7f
                        },
                        new
                        {
                            Id = 18,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 2,
                            TestParameterName = "Second hour female",
                            Unit = "mm",
                            Max_Range = 17f,
                            Min_Range = 12f
                        },
                        new
                        {
                            Id = 19,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Bilirubin total",
                            Unit = "mg/dl",
                            Max_Range = 1f,
                            Min_Range = 0f
                        },
                        new
                        {
                            Id = 20,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Bilirubin direct",
                            Unit = "mg/dl",
                            Max_Range = 0.3f,
                            Min_Range = 0f
                        },
                        new
                        {
                            Id = 21,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Bilirubin indirect",
                            Unit = "mg/dl",
                            Max_Range = 11.7f,
                            Min_Range = 0f
                        },
                        new
                        {
                            Id = 22,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Sgot(ast)",
                            Unit = "u/i",
                            Max_Range = 0.35f,
                            Min_Range = 0f
                        },
                        new
                        {
                            Id = 23,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Sgpt(alt)",
                            Unit = "u/i",
                            Max_Range = 0.45f,
                            Min_Range = 0f
                        },
                        new
                        {
                            Id = 24,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Alkaline phosphatase",
                            Unit = "u/i",
                            Max_Range = 341f,
                            Min_Range = 124f
                        },
                        new
                        {
                            Id = 25,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Total proten",
                            Unit = "mg/dl",
                            Max_Range = 8.3f,
                            Min_Range = 6.6f
                        },
                        new
                        {
                            Id = 26,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Albumin",
                            Unit = "g/dl",
                            Max_Range = 4.9f,
                            Min_Range = 3.5f
                        },
                        new
                        {
                            Id = 27,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Globulin",
                            Unit = "g/dl",
                            Max_Range = 3.5f,
                            Min_Range = 2.3f
                        },
                        new
                        {
                            Id = 28,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "a/g ration",
                            Unit = "g/dl",
                            Max_Range = 1.56f,
                            Min_Range = 1.25f
                        },
                        new
                        {
                            Id = 29,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Blood urea nitrogen(BUN)",
                            Unit = "mg/dl",
                            Max_Range = 25f,
                            Min_Range = 5f
                        },
                        new
                        {
                            Id = 30,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Creatinine(CRE)",
                            Unit = "mg/dl",
                            Max_Range = 1.4f,
                            Min_Range = 0.3f
                        },
                        new
                        {
                            Id = 31,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Uric acid(UA)",
                            Unit = "mg/dl",
                            Max_Range = 7f,
                            Min_Range = 2.5f
                        },
                        new
                        {
                            Id = 32,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Albumin-globilin in ratio(A/G ratio)",
                            Unit = "mg/dl",
                            Max_Range = 1.8f,
                            Min_Range = 1f
                        },
                        new
                        {
                            Id = 33,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "creatinine Clearance/24 hrs urine (CC) Male",
                            Unit = "ml/min",
                            Max_Range = 135f,
                            Min_Range = 71f
                        },
                        new
                        {
                            Id = 34,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "creatinine Clearance/24 hrs urine (CC) Female",
                            Unit = "ml/min",
                            Max_Range = 116f,
                            Min_Range = 78f
                        },
                        new
                        {
                            Id = 35,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Renin",
                            Unit = "pg/ml/hr",
                            Max_Range = 3.95f,
                            Min_Range = 0.15f
                        },
                        new
                        {
                            Id = 36,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Creatinine urine",
                            Unit = "mg/dl",
                            Max_Range = 250f,
                            Min_Range = 60f
                        },
                        new
                        {
                            Id = 37,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Natrium(Na)",
                            Unit = "meq/l",
                            Max_Range = 145f,
                            Min_Range = 135f
                        },
                        new
                        {
                            Id = 38,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Potassium (K)",
                            Unit = "meq/l",
                            Max_Range = 4.5f,
                            Min_Range = 3.4f
                        },
                        new
                        {
                            Id = 39,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Calcium (Ca)",
                            Unit = "mg/dl",
                            Max_Range = 10.6f,
                            Min_Range = 8.4f
                        },
                        new
                        {
                            Id = 40,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Phosphorus (IP)",
                            Unit = "mg/dl",
                            Max_Range = 4.7f,
                            Min_Range = 2.1f
                        },
                        new
                        {
                            Id = 41,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Alkaline phosphatase (ALP)",
                            Unit = "U/L",
                            Max_Range = 110f,
                            Min_Range = 27f
                        });
                });

            modelBuilder.Entity("Domain.Models.Users.Admin", b =>
                {
                    b.HasBaseType("Domain.Models.Users.User");

                    b.HasIndex("DepartmentId");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("Domain.Models.Users.Doctor", b =>
                {
                    b.HasBaseType("Domain.Models.Users.User");

                    b.Property<string>("DocDegree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocSpecialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int")
                        .HasColumnName("Doctor_IndoorPatientRecordId");

                    b.Property<bool>("clinicalDoctor")
                        .HasColumnType("bit");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasDiscriminator().HasValue("Doctor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "fayoum",
                            Age = 40,
                            BloodType = "B+",
                            CreatedDtm = new DateTime(2022, 6, 28, 20, 10, 1, 789, DateTimeKind.Local).AddTicks(4189),
                            DepartmentId = 1,
                            FirstName = "Sayed",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "Taha",
                            Mail = "sayed.taha@gmail.com",
                            NationalId = "27030351876321",
                            PasswordHash = new byte[] { 132, 101, 127, 55, 44, 35, 105, 50, 35, 209, 73, 77, 107, 201, 178, 59, 139, 219, 81, 240, 166, 44, 113, 202, 146, 152, 49, 121, 243, 189, 95, 33, 190, 164, 32, 107, 180, 32, 2, 122, 161, 45, 130, 211, 207, 241, 208, 183, 125, 211, 240, 86, 117, 176, 14, 192, 22, 23, 105, 205, 126, 199, 252, 134 },
                            PasswordSalt = new byte[] { 0, 179, 72, 75, 92, 240, 249, 128, 57, 235, 13, 152, 225, 53, 132, 142, 70, 218, 52, 224, 203, 215, 249, 4, 130, 99, 166, 122, 134, 211, 231, 198, 144, 84, 88, 69, 190, 69, 123, 77, 236, 217, 178, 63, 194, 181, 97, 181, 181, 254, 106, 60, 59, 230, 142, 66, 19, 86, 209, 255, 123, 230, 177, 137, 137, 143, 36, 123, 130, 114, 18, 127, 221, 85, 186, 134, 4, 159, 27, 90, 42, 107, 142, 208, 16, 242, 91, 115, 182, 173, 95, 26, 210, 84, 16, 225, 44, 18, 40, 214, 25, 215, 228, 217, 214, 45, 179, 88, 128, 171, 200, 37, 206, 227, 237, 36, 163, 95, 95, 179, 58, 120, 180, 217, 52, 228, 200, 135 },
                            PhoneNumber = "01113436425",
                            Role = "Doctor",
                            UserName = "sayed_taha",
                            DocDegree = "PHD",
                            DocSpecialization = "AI",
                            clinicalDoctor = false
                        },
                        new
                        {
                            Id = 2,
                            Address = "fayoum",
                            Age = 37,
                            BloodType = "A+",
                            CreatedDtm = new DateTime(2022, 6, 28, 20, 10, 1, 789, DateTimeKind.Local).AddTicks(4204),
                            DepartmentId = 1,
                            FirstName = "Mohamed",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "Hamdy",
                            Mail = "mohamed.hamdy@gmail.com",
                            NationalId = "27030351876321",
                            PasswordHash = new byte[] { 169, 121, 248, 33, 222, 29, 39, 65, 10, 203, 106, 139, 74, 195, 210, 116, 241, 120, 191, 239, 14, 206, 211, 183, 101, 241, 19, 226, 136, 124, 8, 220, 16, 30, 162, 90, 43, 10, 48, 4, 39, 105, 85, 56, 165, 58, 162, 198, 161, 177, 71, 120, 190, 173, 117, 142, 63, 201, 206, 178, 153, 150, 197, 29 },
                            PasswordSalt = new byte[] { 252, 140, 186, 128, 213, 202, 188, 22, 239, 183, 236, 210, 23, 168, 59, 165, 144, 242, 133, 47, 87, 153, 142, 134, 236, 228, 23, 160, 28, 224, 208, 132, 122, 215, 202, 225, 167, 248, 89, 100, 9, 103, 125, 149, 163, 65, 119, 41, 41, 228, 51, 131, 123, 85, 62, 172, 243, 177, 63, 221, 37, 35, 172, 68, 53, 146, 69, 106, 178, 195, 239, 244, 48, 143, 241, 69, 191, 249, 236, 112, 31, 104, 78, 139, 203, 217, 88, 212, 104, 204, 2, 109, 207, 22, 96, 156, 78, 58, 5, 154, 134, 223, 234, 92, 77, 50, 206, 168, 243, 156, 232, 33, 70, 125, 167, 162, 237, 56, 255, 221, 31, 67, 108, 94, 34, 44, 149, 99 },
                            PhoneNumber = "01113436425",
                            Role = "Doctor",
                            UserName = "mohamed_hamdy",
                            DocDegree = "PHD",
                            DocSpecialization = "AI",
                            clinicalDoctor = false
                        },
                        new
                        {
                            Id = 3,
                            Address = "fayoum",
                            Age = 50,
                            BloodType = "AB+",
                            CreatedDtm = new DateTime(2022, 6, 28, 20, 10, 1, 789, DateTimeKind.Local).AddTicks(4207),
                            DepartmentId = 2,
                            FirstName = "Amr",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "Refaat",
                            Mail = "amr.refaat@gmail.com",
                            NationalId = "27030351876321",
                            PasswordHash = new byte[] { 110, 139, 15, 8, 241, 205, 118, 7, 146, 195, 176, 38, 34, 10, 16, 116, 228, 222, 39, 228, 108, 119, 76, 99, 248, 41, 115, 184, 164, 202, 173, 208, 155, 233, 40, 67, 164, 253, 194, 83, 144, 91, 248, 105, 88, 142, 148, 209, 2, 174, 64, 109, 113, 97, 110, 230, 96, 164, 157, 202, 95, 100, 19, 175 },
                            PasswordSalt = new byte[] { 112, 195, 166, 171, 186, 173, 85, 133, 42, 235, 233, 199, 80, 100, 140, 250, 110, 95, 51, 83, 248, 50, 146, 62, 241, 220, 179, 30, 145, 219, 140, 38, 167, 140, 56, 250, 151, 221, 122, 208, 245, 37, 207, 230, 198, 0, 65, 66, 70, 184, 33, 96, 117, 59, 148, 72, 130, 52, 215, 178, 235, 151, 213, 53, 156, 81, 157, 143, 74, 155, 36, 5, 251, 170, 114, 214, 6, 90, 168, 253, 203, 16, 126, 246, 38, 61, 44, 65, 19, 27, 13, 125, 22, 112, 22, 147, 27, 61, 39, 36, 8, 118, 17, 221, 69, 134, 247, 250, 143, 38, 161, 79, 243, 143, 47, 228, 60, 2, 16, 219, 59, 248, 100, 202, 243, 178, 171, 66 },
                            PhoneNumber = "01113436425",
                            Role = "Doctor",
                            UserName = "amr_refaat",
                            DocDegree = "PHD",
                            DocSpecialization = "AI",
                            clinicalDoctor = false
                        });
                });

            modelBuilder.Entity("Domain.Models.Users.Nurse", b =>
                {
                    b.HasBaseType("Domain.Models.Users.User");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<string>("NurseDegree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NurseSpecialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasDiscriminator().HasValue("Nurse");
                });

            modelBuilder.Entity("Domain.Models.Users.Patient", b =>
                {
                    b.HasBaseType("Domain.Models.Users.User");

                    b.HasIndex("DepartmentId");

                    b.HasDiscriminator().HasValue("Patient");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            Address = "fayoum",
                            Age = 40,
                            BloodType = "B+",
                            CreatedDtm = new DateTime(2022, 6, 28, 20, 10, 1, 789, DateTimeKind.Local).AddTicks(4406),
                            DepartmentId = 1,
                            FirstName = "Sayed",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "Taha",
                            Mail = "sayed.taha@gmail.com",
                            NationalId = "27030351876321",
                            PasswordHash = new byte[] { 27, 107, 154, 126, 213, 206, 26, 246, 168, 17, 212, 35, 133, 57, 203, 63, 3, 104, 217, 14, 66, 95, 67, 29, 175, 207, 220, 118, 33, 94, 77, 155, 114, 118, 211, 100, 94, 214, 190, 225, 127, 195, 37, 41, 195, 73, 52, 45, 100, 26, 232, 131, 207, 255, 181, 109, 113, 254, 141, 246, 217, 5, 149, 106 },
                            PasswordSalt = new byte[] { 220, 240, 153, 127, 86, 164, 59, 207, 203, 88, 83, 33, 220, 101, 149, 179, 137, 137, 209, 152, 139, 194, 127, 10, 78, 109, 14, 81, 225, 149, 91, 15, 207, 31, 120, 13, 242, 100, 253, 222, 211, 227, 115, 145, 208, 212, 85, 211, 145, 194, 9, 193, 54, 251, 150, 144, 202, 171, 110, 188, 200, 179, 156, 59, 25, 161, 32, 166, 150, 206, 162, 162, 215, 101, 246, 1, 34, 54, 241, 154, 224, 133, 102, 106, 51, 120, 129, 217, 214, 197, 247, 30, 83, 81, 73, 185, 107, 151, 209, 172, 137, 50, 16, 42, 98, 28, 159, 124, 241, 135, 159, 60, 174, 19, 51, 252, 201, 16, 203, 228, 50, 192, 143, 129, 251, 159, 67, 45 },
                            PhoneNumber = "01113436425",
                            Role = "Patient",
                            UserName = "patient1"
                        },
                        new
                        {
                            Id = 5,
                            Address = "fayoum",
                            Age = 37,
                            BloodType = "O+",
                            CreatedDtm = new DateTime(2022, 6, 28, 20, 10, 1, 789, DateTimeKind.Local).AddTicks(4410),
                            DepartmentId = 1,
                            FirstName = "Mohamed",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "Hamdy",
                            Mail = "mohamed.hamdy@gmail.com",
                            NationalId = "27030351876321",
                            PasswordHash = new byte[] { 150, 121, 221, 196, 132, 61, 167, 66, 252, 206, 222, 252, 3, 62, 94, 253, 119, 248, 169, 191, 56, 180, 7, 249, 133, 190, 118, 242, 186, 62, 235, 14, 178, 145, 106, 193, 1, 50, 94, 91, 39, 195, 113, 69, 121, 233, 64, 134, 5, 41, 231, 79, 81, 179, 197, 213, 101, 198, 201, 129, 218, 200, 100, 141 },
                            PasswordSalt = new byte[] { 189, 83, 206, 157, 100, 58, 69, 67, 99, 64, 98, 67, 186, 42, 139, 24, 123, 187, 69, 245, 142, 128, 186, 225, 219, 172, 186, 244, 97, 2, 65, 220, 85, 99, 46, 222, 111, 167, 55, 201, 95, 224, 207, 14, 204, 233, 248, 113, 238, 98, 103, 65, 22, 46, 103, 162, 145, 12, 82, 255, 105, 121, 153, 28, 120, 233, 193, 159, 252, 63, 33, 34, 112, 42, 95, 241, 5, 51, 163, 238, 135, 143, 134, 153, 28, 65, 231, 43, 160, 152, 57, 66, 31, 211, 228, 34, 67, 203, 9, 238, 21, 212, 130, 6, 206, 40, 174, 142, 103, 227, 198, 252, 61, 5, 157, 9, 127, 145, 186, 105, 37, 47, 54, 219, 152, 152, 196, 149 },
                            PhoneNumber = "01113436425",
                            Role = "Patient",
                            UserName = "patient2"
                        },
                        new
                        {
                            Id = 6,
                            Address = "fayoum",
                            Age = 50,
                            BloodType = "O-",
                            CreatedDtm = new DateTime(2022, 6, 28, 20, 10, 1, 789, DateTimeKind.Local).AddTicks(4413),
                            FirstName = "Amr",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "Refaat",
                            Mail = "amr.refaat@gmail.com",
                            NationalId = "27030351876321",
                            PasswordHash = new byte[] { 126, 186, 99, 28, 4, 35, 31, 17, 127, 250, 251, 2, 122, 203, 175, 93, 85, 170, 138, 61, 236, 213, 90, 80, 174, 12, 89, 136, 224, 150, 251, 74, 191, 17, 125, 70, 226, 249, 247, 140, 11, 189, 252, 249, 104, 194, 162, 245, 242, 233, 90, 149, 21, 38, 240, 75, 202, 35, 147, 81, 109, 148, 108, 29 },
                            PasswordSalt = new byte[] { 33, 9, 167, 206, 124, 45, 76, 172, 62, 230, 197, 228, 86, 11, 128, 94, 110, 81, 2, 173, 249, 151, 4, 166, 231, 13, 244, 11, 224, 5, 212, 2, 239, 241, 170, 249, 230, 154, 97, 29, 59, 18, 2, 70, 190, 38, 162, 129, 137, 152, 6, 75, 148, 247, 37, 6, 212, 181, 225, 143, 73, 77, 79, 244, 208, 245, 10, 35, 206, 65, 49, 169, 207, 69, 18, 208, 9, 65, 1, 188, 52, 167, 51, 211, 10, 20, 222, 241, 164, 160, 147, 94, 91, 85, 151, 219, 68, 24, 141, 91, 62, 227, 96, 129, 109, 218, 18, 206, 124, 239, 32, 166, 228, 152, 152, 173, 199, 68, 132, 15, 253, 224, 226, 49, 146, 239, 204, 65 },
                            PhoneNumber = "01113436425",
                            Role = "Patient",
                            UserName = "patient3"
                        });
                });

            modelBuilder.Entity("Domain.Models.Users.Receptionist", b =>
                {
                    b.HasBaseType("Domain.Models.Users.User");

                    b.HasIndex("DepartmentId");

                    b.HasDiscriminator().HasValue("Receptionist");
                });

            modelBuilder.Entity("Domain.Models.Appointment", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Models.Bed", b =>
                {
                    b.HasOne("Domain.Models.Room", "Room")
                        .WithMany("Beds")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Domain.Models.ClinicPatientRecord", b =>
                {
                    b.HasOne("Domain.Models.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.Patient", null)
                        .WithMany("ClinicPatientRecord")
                        .HasForeignKey("PatientId");

                    b.HasOne("Domain.Models.Prescription", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Department");

                    b.Navigation("Doctor");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("Domain.Models.IndoorPatientRecord", b =>
                {
                    b.HasOne("Domain.Models.Bed", "Bed")
                        .WithMany()
                        .HasForeignKey("BedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.Doctor", "OrderdByDoctor")
                        .WithMany()
                        .HasForeignKey("OrderdByDoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.Patient", "Patient")
                        .WithMany("IndoorPatientRecord")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bed");

                    b.Navigation("Department");

                    b.Navigation("OrderdByDoctor");

                    b.Navigation("Patient");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Domain.Models.Labs.LabRequest", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", "IndoorPatientRecord")
                        .WithMany()
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Labs.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("IndoorPatientRecord");

                    b.Navigation("Patient");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Domain.Models.Labs.PatientScan", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", "IndoorPatientRecord")
                        .WithMany("Scans")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Labs.Scan", "Scan")
                        .WithMany()
                        .HasForeignKey("ScanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("IndoorPatientRecord");

                    b.Navigation("Patient");

                    b.Navigation("Scan");
                });

            modelBuilder.Entity("Domain.Models.Labs.PatientTest", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", "IndoorPatientRecord")
                        .WithMany("Tests")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Labs.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("IndoorPatientRecord");

                    b.Navigation("Patient");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Domain.Models.Labs.ScanRequest", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", "IndoorPatientRecord")
                        .WithMany()
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Labs.Scan", "Scan")
                        .WithMany()
                        .HasForeignKey("ScanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("IndoorPatientRecord");

                    b.Navigation("Patient");

                    b.Navigation("Scan");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestDetails", b =>
                {
                    b.HasOne("Domain.Models.Labs.TestParameter", "TestParameter")
                        .WithMany()
                        .HasForeignKey("TestParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestParameter");
                });

            modelBuilder.Entity("Domain.Models.Note", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", null)
                        .WithMany("Notes")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Users.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId");

                    b.Navigation("Doctor");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("Domain.Models.Prescription", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.IndoorPatientRecord", null)
                        .WithMany("Prescriptions")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Users.Patient", "patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("patient");
                });

            modelBuilder.Entity("Domain.Models.PrescriptionItem", b =>
                {
                    b.HasOne("Domain.Models.Prescription", null)
                        .WithMany("PrescriptionItems")
                        .HasForeignKey("PrescriptionId");
                });

            modelBuilder.Entity("Domain.Models.Room", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.Schedule", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Domain.Models.TimeSlot", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Domain.Models.VitalSign", b =>
                {
                    b.HasOne("Domain.Models.IndoorPatientRecord", null)
                        .WithMany("VitalSigns")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Note", "Note")
                        .WithMany()
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("Patientid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");

                    b.Navigation("Nurse");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestDetailsCategorical", b =>
                {
                    b.HasOne("Domain.Models.Labs.PatientTest", "PatientTest")
                        .WithMany("CategoricalDetails")
                        .HasForeignKey("PatientTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientTest");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestDetailsNumerical", b =>
                {
                    b.HasOne("Domain.Models.Labs.PatientTest", "PatientTest")
                        .WithMany("NumericalDetails")
                        .HasForeignKey("PatientTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientTest");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestParameterCategorical", b =>
                {
                    b.HasOne("Domain.Models.Labs.Test", "Test")
                        .WithMany("CategoricalParamters")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestParameterNumerical", b =>
                {
                    b.HasOne("Domain.Models.Labs.Test", "Test")
                        .WithMany("NumericalParamters")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Domain.Models.Users.Admin", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.Users.Doctor", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany("Doctors")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", null)
                        .WithMany("Doctors")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.Users.Nurse", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany("Nurses")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", null)
                        .WithMany("Nurses")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.Users.Patient", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany("Patients")
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.Users.Receptionist", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.Department", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Nurses");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Domain.Models.IndoorPatientRecord", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Notes");

                    b.Navigation("Nurses");

                    b.Navigation("Prescriptions");

                    b.Navigation("Scans");

                    b.Navigation("Tests");

                    b.Navigation("VitalSigns");
                });

            modelBuilder.Entity("Domain.Models.Labs.PatientTest", b =>
                {
                    b.Navigation("CategoricalDetails");

                    b.Navigation("NumericalDetails");
                });

            modelBuilder.Entity("Domain.Models.Labs.Test", b =>
                {
                    b.Navigation("CategoricalParamters");

                    b.Navigation("NumericalParamters");
                });

            modelBuilder.Entity("Domain.Models.Prescription", b =>
                {
                    b.Navigation("PrescriptionItems");
                });

            modelBuilder.Entity("Domain.Models.Room", b =>
                {
                    b.Navigation("Beds");
                });

            modelBuilder.Entity("Domain.Models.Users.Patient", b =>
                {
                    b.Navigation("ClinicPatientRecord");

                    b.Navigation("IndoorPatientRecord");
                });
#pragma warning restore 612, 618
        }
    }
}
