// <auto-generated />
using System;
using Domain.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220628180650_clinicalDepartments")]
    partial class clinicalDepartments
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("AppointmentCharge")
                        .HasColumnType("real");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AppointmentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("Examined")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Domain.Models.Bed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<bool>("Reserved")
                        .HasColumnType("bit");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Beds");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Number = 1,
                            Reserved = false,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 2,
                            Number = 2,
                            Reserved = false,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 3,
                            Number = 3,
                            Reserved = false,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 4,
                            Number = 4,
                            Reserved = false,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 5,
                            Number = 1,
                            Reserved = false,
                            RoomId = 2
                        },
                        new
                        {
                            Id = 6,
                            Number = 2,
                            Reserved = false,
                            RoomId = 2
                        },
                        new
                        {
                            Id = 7,
                            Number = 1,
                            Reserved = false,
                            RoomId = 3
                        },
                        new
                        {
                            Id = 8,
                            Number = 1,
                            Reserved = false,
                            RoomId = 4
                        },
                        new
                        {
                            Id = 9,
                            Number = 2,
                            Reserved = false,
                            RoomId = 4
                        },
                        new
                        {
                            Id = 10,
                            Number = 3,
                            Reserved = false,
                            RoomId = 4
                        },
                        new
                        {
                            Id = 11,
                            Number = 4,
                            Reserved = false,
                            RoomId = 4
                        },
                        new
                        {
                            Id = 12,
                            Number = 1,
                            Reserved = false,
                            RoomId = 5
                        },
                        new
                        {
                            Id = 13,
                            Number = 2,
                            Reserved = false,
                            RoomId = 5
                        },
                        new
                        {
                            Id = 14,
                            Number = 3,
                            Reserved = false,
                            RoomId = 5
                        },
                        new
                        {
                            Id = 15,
                            Number = 4,
                            Reserved = false,
                            RoomId = 5
                        },
                        new
                        {
                            Id = 16,
                            Number = 1,
                            Reserved = false,
                            RoomId = 6
                        },
                        new
                        {
                            Id = 17,
                            Number = 2,
                            Reserved = false,
                            RoomId = 6
                        },
                        new
                        {
                            Id = 18,
                            Number = 3,
                            Reserved = false,
                            RoomId = 6
                        },
                        new
                        {
                            Id = 19,
                            Number = 4,
                            Reserved = false,
                            RoomId = 6
                        },
                        new
                        {
                            Id = 20,
                            Number = 1,
                            Reserved = false,
                            RoomId = 7
                        },
                        new
                        {
                            Id = 21,
                            Number = 1,
                            Reserved = false,
                            RoomId = 8
                        },
                        new
                        {
                            Id = 22,
                            Number = 2,
                            Reserved = false,
                            RoomId = 8
                        });
                });

            modelBuilder.Entity("Domain.Models.ClinicPatientRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("OralMedicalHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("ClinicPatients");
                });

            modelBuilder.Entity("Domain.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Department_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("clinicalDepartment")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Department_Name = "paediatrics",
                            IsActive = true,
                            Location = "first floor",
                            clinicalDepartment = false
                        },
                        new
                        {
                            Id = 2,
                            Department_Name = "gynaecology",
                            IsActive = true,
                            Location = "first floor",
                            clinicalDepartment = false
                        },
                        new
                        {
                            Id = 3,
                            Department_Name = "eye",
                            IsActive = false,
                            Location = "second floor",
                            clinicalDepartment = false
                        },
                        new
                        {
                            Id = 4,
                            Department_Name = "orthopaedics",
                            IsActive = true,
                            Location = "third floor",
                            clinicalDepartment = false
                        },
                        new
                        {
                            Id = 5,
                            Department_Name = "neurology",
                            IsActive = true,
                            Location = "second floor",
                            clinicalDepartment = false
                        },
                        new
                        {
                            Id = 6,
                            Department_Name = "cardiology",
                            IsActive = true,
                            Location = "fourth floor",
                            clinicalDepartment = false
                        },
                        new
                        {
                            Id = 7,
                            Department_Name = "dental",
                            IsActive = false,
                            Location = "fourth floor",
                            clinicalDepartment = false
                        },
                        new
                        {
                            Id = 8,
                            Department_Name = "ENT",
                            IsActive = true,
                            Location = "third floor",
                            clinicalDepartment = false
                        },
                        new
                        {
                            Id = 9,
                            Department_Name = "Labs",
                            IsActive = true,
                            Location = "third floor",
                            clinicalDepartment = false
                        },
                        new
                        {
                            Id = 10,
                            Department_Name = "Scan",
                            IsActive = true,
                            Location = "third floor",
                            clinicalDepartment = false
                        });
                });

            modelBuilder.Entity("Domain.Models.IndoorPatientRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BedId")
                        .HasColumnType("int");

                    b.Property<string>("CauseOfAdmission")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DischargeDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Disharged")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EnterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OralMedicalHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderdByDoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Recommendation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BedId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("OrderdByDoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RoomId");

                    b.ToTable("IndoorPatients");
                });

            modelBuilder.Entity("Domain.Models.Labs.LabRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TestId");

                    b.ToTable("LabRequests");
                });

            modelBuilder.Entity("Domain.Models.Labs.PatientScan", b =>
                {
                    b.Property<int>("PatientScanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientScanId"), 1L, 1);

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScanDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ScanId")
                        .HasColumnType("int");

                    b.Property<string>("WrittenReport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientScanId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ScanId");

                    b.ToTable("PatientScans");
                });

            modelBuilder.Entity("Domain.Models.Labs.PatientTest", b =>
                {
                    b.Property<int>("PatientTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientTestId"), 1L, 1);

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("PatientTestId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TestId");

                    b.ToTable("PatientTest");
                });

            modelBuilder.Entity("Domain.Models.Labs.Scan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("ScanCharge")
                        .HasColumnType("real");

                    b.Property<string>("ScanName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Scan");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ScanCharge = 100f,
                            ScanName = "Angiography"
                        },
                        new
                        {
                            Id = 2,
                            ScanCharge = 100f,
                            ScanName = "CT"
                        },
                        new
                        {
                            Id = 3,
                            ScanCharge = 100f,
                            ScanName = "Echocardiogram"
                        },
                        new
                        {
                            Id = 4,
                            ScanCharge = 100f,
                            ScanName = "Electrocardiogram (ECG)"
                        },
                        new
                        {
                            Id = 5,
                            ScanCharge = 100f,
                            ScanName = "MRI scan"
                        },
                        new
                        {
                            Id = 6,
                            ScanCharge = 100f,
                            ScanName = "PET scan"
                        },
                        new
                        {
                            Id = 7,
                            ScanCharge = 100f,
                            ScanName = "Ultrasound scan"
                        },
                        new
                        {
                            Id = 8,
                            ScanCharge = 100f,
                            ScanName = "X-ray"
                        });
                });

            modelBuilder.Entity("Domain.Models.Labs.ScanRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("ScanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ScanId");

                    b.ToTable("ScanRequests");
                });

            modelBuilder.Entity("Domain.Models.Labs.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TestCharge")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Tests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CBC",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 2,
                            Name = "ESR",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 3,
                            Name = "LIVER FUNCTION TEST",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 4,
                            Name = "Kidney function test",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 5,
                            Name = "Cholesterol test",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 6,
                            Name = "pituitary gland test",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 7,
                            Name = "H.pylori test",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 8,
                            Name = "thyroid gland report",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 9,
                            Name = "STOOL TEST",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 10,
                            Name = "urine report",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 11,
                            Name = "Pcr",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 12,
                            Name = "Diabetes test",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 13,
                            Name = "esr",
                            TestCharge = 100f
                        },
                        new
                        {
                            Id = 14,
                            Name = "esr",
                            TestCharge = 100f
                        });
                });

            modelBuilder.Entity("Domain.Models.Labs.TestDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PatientTestId")
                        .HasColumnType("int");

                    b.Property<int>("TestParameterId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TestParameterId");

                    b.ToTable("TestDetails", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("TestDetails");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FieldType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InputPattern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<string>("TestParameterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TestParameters", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("TestParameter");
                });

            modelBuilder.Entity("Domain.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int?>("NurseId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("NurseId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Domain.Models.Prescription", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionId"), 1L, 1);

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Prescription_Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("re_appointement_date")
                        .HasColumnType("datetime2");

                    b.HasKey("PrescriptionId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("PatientId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("Domain.Models.PrescriptionItem", b =>
                {
                    b.Property<int>("PrescriptionItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionItemId"), 1L, 1);

                    b.Property<string>("Dose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Durarion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicineType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medicine_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medicine_concentration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrescriptionId")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionItemId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PrescriptionItems");
                });

            modelBuilder.Entity("Domain.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfBeds")
                        .HasColumnType("int");

                    b.Property<bool>("Reserved")
                        .HasColumnType("bit");

                    b.Property<int>("RoomCharges")
                        .HasColumnType("int");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.Property<string>("RoomType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentId = 1,
                            FloorNumber = 1,
                            NumberOfBeds = 4,
                            Reserved = false,
                            RoomCharges = 120,
                            RoomNumber = 1,
                            RoomType = "common"
                        },
                        new
                        {
                            Id = 2,
                            DepartmentId = 1,
                            FloorNumber = 1,
                            NumberOfBeds = 2,
                            Reserved = false,
                            RoomCharges = 140,
                            RoomNumber = 2,
                            RoomType = "common"
                        },
                        new
                        {
                            Id = 3,
                            DepartmentId = 1,
                            FloorNumber = 1,
                            NumberOfBeds = 1,
                            Reserved = false,
                            RoomCharges = 200,
                            RoomNumber = 3,
                            RoomType = "suite"
                        },
                        new
                        {
                            Id = 4,
                            DepartmentId = 1,
                            FloorNumber = 2,
                            NumberOfBeds = 4,
                            Reserved = false,
                            RoomCharges = 120,
                            RoomNumber = 4,
                            RoomType = "common"
                        },
                        new
                        {
                            Id = 5,
                            DepartmentId = 2,
                            FloorNumber = 2,
                            NumberOfBeds = 4,
                            Reserved = false,
                            RoomCharges = 120,
                            RoomNumber = 5,
                            RoomType = "common"
                        },
                        new
                        {
                            Id = 6,
                            DepartmentId = 2,
                            FloorNumber = 2,
                            NumberOfBeds = 4,
                            Reserved = false,
                            RoomCharges = 120,
                            RoomNumber = 6,
                            RoomType = "common"
                        },
                        new
                        {
                            Id = 7,
                            DepartmentId = 2,
                            FloorNumber = 3,
                            NumberOfBeds = 1,
                            Reserved = false,
                            RoomCharges = 200,
                            RoomNumber = 7,
                            RoomType = "suite"
                        },
                        new
                        {
                            Id = 8,
                            DepartmentId = 1,
                            FloorNumber = 3,
                            NumberOfBeds = 2,
                            Reserved = false,
                            RoomCharges = 140,
                            RoomNumber = 8,
                            RoomType = "common"
                        });
                });

            modelBuilder.Entity("Domain.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DayOfWork")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("TimePerPatient")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Domain.Models.TimeSlot", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("Dayofwork")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("Reserved")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("slot_time")
                        .HasColumnType("time");

                    b.Property<int>("slotnumber")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("DoctorId");

                    b.ToTable("TimeSlots");
                });

            modelBuilder.Entity("Domain.Models.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("Role").HasValue("User");
                });

            modelBuilder.Entity("Domain.Models.VitalSign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("ECG")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.Property<int>("NurseId")
                        .HasColumnType("int");

                    b.Property<int>("Patientid")
                        .HasColumnType("int");

                    b.Property<string>("Pressure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PulseRate")
                        .HasColumnType("int");

                    b.Property<float>("RespirationRate")
                        .HasColumnType("real");

                    b.Property<float>("Temperature")
                        .HasColumnType("real");

                    b.Property<DateTime>("vitals_date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasIndex("NoteId");

                    b.HasIndex("NurseId");

                    b.HasIndex("Patientid");

                    b.ToTable("VitalSigns");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestDetailsCategorical", b =>
                {
                    b.HasBaseType("Domain.Models.Labs.TestDetails");

                    b.Property<string>("MeasuredValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("PatientTestId");

                    b.HasDiscriminator().HasValue("Categorical");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestDetailsNumerical", b =>
                {
                    b.HasBaseType("Domain.Models.Labs.TestDetails");

                    b.Property<float>("MeasuredValue")
                        .HasColumnType("real")
                        .HasColumnName("TestDetailsNumerical_MeasuredValue");

                    b.HasIndex("PatientTestId");

                    b.HasDiscriminator().HasValue("Numerical");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestParameterCategorical", b =>
                {
                    b.HasBaseType("Domain.Models.Labs.TestParameter");

                    b.Property<string>("Normalvalue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("TestId");

                    b.HasDiscriminator().HasValue("Categorical");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestParameterNumerical", b =>
                {
                    b.HasBaseType("Domain.Models.Labs.TestParameter");

                    b.Property<float>("Max_Range")
                        .HasColumnType("real");

                    b.Property<float>("Min_Range")
                        .HasColumnType("real");

                    b.HasIndex("TestId");

                    b.HasDiscriminator().HasValue("Numerical");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "Heamoglobin(edta blood)",
                            Unit = "g/dl",
                            Max_Range = 15.5f,
                            Min_Range = 11.5f
                        },
                        new
                        {
                            Id = 2,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "Haematocrit(pcv)",
                            Unit = "%",
                            Max_Range = 45f,
                            Min_Range = 36f
                        },
                        new
                        {
                            Id = 3,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "RBCs count(EDTA Blood)",
                            Unit = "Millions/cmm",
                            Max_Range = 5.2f,
                            Min_Range = 4f
                        },
                        new
                        {
                            Id = 4,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "mcv",
                            Unit = "Fl",
                            Max_Range = 100f,
                            Min_Range = 80f
                        },
                        new
                        {
                            Id = 5,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "mch",
                            Unit = "Pg",
                            Max_Range = 33f,
                            Min_Range = 27f
                        },
                        new
                        {
                            Id = 6,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "mchc",
                            Unit = "g/dl",
                            Max_Range = 37f,
                            Min_Range = 31f
                        },
                        new
                        {
                            Id = 7,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "Rdw-cv",
                            Unit = "%",
                            Max_Range = 15f,
                            Min_Range = 11.5f
                        },
                        new
                        {
                            Id = 8,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "Platelet count (edta blood)",
                            Unit = "Thousands/cmm",
                            Max_Range = 450f,
                            Min_Range = 150f
                        },
                        new
                        {
                            Id = 9,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "Total leucocytic count (edta blood)",
                            Unit = "Thousands/cmm",
                            Max_Range = 11f,
                            Min_Range = 4f
                        },
                        new
                        {
                            Id = 10,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "neutrophis",
                            Unit = "×10^9/l",
                            Max_Range = 7f,
                            Min_Range = 2f
                        },
                        new
                        {
                            Id = 11,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "lymphocytes",
                            Unit = "×10^9/l",
                            Max_Range = 4.8f,
                            Min_Range = 1f
                        },
                        new
                        {
                            Id = 12,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "monocytes",
                            Unit = "×10^9/l",
                            Max_Range = 1f,
                            Min_Range = 0.2f
                        },
                        new
                        {
                            Id = 13,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "eosinophils",
                            Unit = "×10^9/l",
                            Max_Range = 0.45f,
                            Min_Range = 0.1f
                        },
                        new
                        {
                            Id = 14,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 1,
                            TestParameterName = "basophils",
                            Unit = "×10^9/l",
                            Max_Range = 0.1f,
                            Min_Range = 0f
                        },
                        new
                        {
                            Id = 15,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 2,
                            TestParameterName = "First hour male",
                            Unit = "mm",
                            Max_Range = 7f,
                            Min_Range = 3f
                        },
                        new
                        {
                            Id = 16,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 2,
                            TestParameterName = "First hour female",
                            Unit = "mm",
                            Max_Range = 12f,
                            Min_Range = 7f
                        },
                        new
                        {
                            Id = 17,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 2,
                            TestParameterName = "Second hour male",
                            Unit = "mm",
                            Max_Range = 15f,
                            Min_Range = 7f
                        },
                        new
                        {
                            Id = 18,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 2,
                            TestParameterName = "Second hour female",
                            Unit = "mm",
                            Max_Range = 17f,
                            Min_Range = 12f
                        },
                        new
                        {
                            Id = 19,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Bilirubin total",
                            Unit = "mg/dl",
                            Max_Range = 1f,
                            Min_Range = 0f
                        },
                        new
                        {
                            Id = 20,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Bilirubin direct",
                            Unit = "mg/dl",
                            Max_Range = 0.3f,
                            Min_Range = 0f
                        },
                        new
                        {
                            Id = 21,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Bilirubin indirect",
                            Unit = "mg/dl",
                            Max_Range = 11.7f,
                            Min_Range = 0f
                        },
                        new
                        {
                            Id = 22,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Sgot(ast)",
                            Unit = "u/i",
                            Max_Range = 0.35f,
                            Min_Range = 0f
                        },
                        new
                        {
                            Id = 23,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Sgpt(alt)",
                            Unit = "u/i",
                            Max_Range = 0.45f,
                            Min_Range = 0f
                        },
                        new
                        {
                            Id = 24,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Alkaline phosphatase",
                            Unit = "u/i",
                            Max_Range = 341f,
                            Min_Range = 124f
                        },
                        new
                        {
                            Id = 25,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Total proten",
                            Unit = "mg/dl",
                            Max_Range = 8.3f,
                            Min_Range = 6.6f
                        },
                        new
                        {
                            Id = 26,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Albumin",
                            Unit = "g/dl",
                            Max_Range = 4.9f,
                            Min_Range = 3.5f
                        },
                        new
                        {
                            Id = 27,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "Globulin",
                            Unit = "g/dl",
                            Max_Range = 3.5f,
                            Min_Range = 2.3f
                        },
                        new
                        {
                            Id = 28,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 3,
                            TestParameterName = "a/g ration",
                            Unit = "g/dl",
                            Max_Range = 1.56f,
                            Min_Range = 1.25f
                        },
                        new
                        {
                            Id = 29,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Blood urea nitrogen(BUN)",
                            Unit = "mg/dl",
                            Max_Range = 25f,
                            Min_Range = 5f
                        },
                        new
                        {
                            Id = 30,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Creatinine(CRE)",
                            Unit = "mg/dl",
                            Max_Range = 1.4f,
                            Min_Range = 0.3f
                        },
                        new
                        {
                            Id = 31,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Uric acid(UA)",
                            Unit = "mg/dl",
                            Max_Range = 7f,
                            Min_Range = 2.5f
                        },
                        new
                        {
                            Id = 32,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Albumin-globilin in ratio(A/G ratio)",
                            Unit = "mg/dl",
                            Max_Range = 1.8f,
                            Min_Range = 1f
                        },
                        new
                        {
                            Id = 33,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "creatinine Clearance/24 hrs urine (CC) Male",
                            Unit = "ml/min",
                            Max_Range = 135f,
                            Min_Range = 71f
                        },
                        new
                        {
                            Id = 34,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "creatinine Clearance/24 hrs urine (CC) Female",
                            Unit = "ml/min",
                            Max_Range = 116f,
                            Min_Range = 78f
                        },
                        new
                        {
                            Id = 35,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Renin",
                            Unit = "pg/ml/hr",
                            Max_Range = 3.95f,
                            Min_Range = 0.15f
                        },
                        new
                        {
                            Id = 36,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Creatinine urine",
                            Unit = "mg/dl",
                            Max_Range = 250f,
                            Min_Range = 60f
                        },
                        new
                        {
                            Id = 37,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Natrium(Na)",
                            Unit = "meq/l",
                            Max_Range = 145f,
                            Min_Range = 135f
                        },
                        new
                        {
                            Id = 38,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Potassium (K)",
                            Unit = "meq/l",
                            Max_Range = 4.5f,
                            Min_Range = 3.4f
                        },
                        new
                        {
                            Id = 39,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Calcium (Ca)",
                            Unit = "mg/dl",
                            Max_Range = 10.6f,
                            Min_Range = 8.4f
                        },
                        new
                        {
                            Id = 40,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Phosphorus (IP)",
                            Unit = "mg/dl",
                            Max_Range = 4.7f,
                            Min_Range = 2.1f
                        },
                        new
                        {
                            Id = 41,
                            FieldType = "text",
                            InputPattern = "^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$",
                            TestId = 4,
                            TestParameterName = "Alkaline phosphatase (ALP)",
                            Unit = "U/L",
                            Max_Range = 110f,
                            Min_Range = 27f
                        });
                });

            modelBuilder.Entity("Domain.Models.Users.Admin", b =>
                {
                    b.HasBaseType("Domain.Models.Users.User");

                    b.HasIndex("DepartmentId");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("Domain.Models.Users.Doctor", b =>
                {
                    b.HasBaseType("Domain.Models.Users.User");

                    b.Property<string>("DocDegree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocSpecialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int")
                        .HasColumnName("Doctor_IndoorPatientRecordId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasDiscriminator().HasValue("Doctor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "fayoum",
                            Age = 40,
                            BloodType = "B+",
                            CreatedDtm = new DateTime(2022, 6, 28, 20, 6, 50, 67, DateTimeKind.Local).AddTicks(996),
                            DepartmentId = 1,
                            FirstName = "Sayed",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "Taha",
                            Mail = "sayed.taha@gmail.com",
                            NationalId = "27030351876321",
                            PasswordHash = new byte[] { 59, 95, 125, 24, 65, 16, 92, 166, 44, 154, 109, 218, 182, 139, 56, 230, 185, 39, 243, 45, 214, 104, 201, 71, 110, 3, 39, 33, 43, 127, 250, 153, 231, 157, 236, 34, 194, 39, 16, 197, 202, 130, 144, 67, 16, 73, 70, 116, 218, 159, 41, 11, 46, 222, 92, 110, 179, 97, 220, 183, 61, 37, 234, 166 },
                            PasswordSalt = new byte[] { 89, 128, 48, 162, 217, 166, 177, 11, 65, 204, 179, 53, 142, 232, 159, 180, 245, 148, 71, 152, 129, 13, 53, 222, 48, 35, 62, 51, 158, 251, 183, 17, 139, 218, 218, 242, 148, 196, 156, 193, 234, 197, 217, 43, 237, 211, 102, 32, 221, 15, 25, 141, 216, 146, 253, 216, 36, 45, 64, 235, 235, 238, 92, 130, 32, 147, 216, 239, 207, 81, 124, 62, 174, 236, 89, 66, 51, 244, 42, 70, 134, 69, 10, 213, 8, 212, 153, 67, 14, 115, 76, 34, 177, 126, 48, 156, 150, 51, 142, 119, 6, 103, 244, 102, 75, 255, 68, 228, 169, 166, 33, 184, 219, 15, 79, 250, 80, 169, 89, 129, 172, 172, 238, 149, 165, 19, 99, 124 },
                            PhoneNumber = "01113436425",
                            Role = "Doctor",
                            UserName = "sayed_taha",
                            DocDegree = "PHD",
                            DocSpecialization = "AI"
                        },
                        new
                        {
                            Id = 2,
                            Address = "fayoum",
                            Age = 37,
                            BloodType = "A+",
                            CreatedDtm = new DateTime(2022, 6, 28, 20, 6, 50, 67, DateTimeKind.Local).AddTicks(1010),
                            DepartmentId = 1,
                            FirstName = "Mohamed",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "Hamdy",
                            Mail = "mohamed.hamdy@gmail.com",
                            NationalId = "27030351876321",
                            PasswordHash = new byte[] { 192, 60, 129, 251, 28, 49, 25, 53, 162, 140, 93, 22, 101, 63, 195, 7, 236, 102, 76, 26, 43, 132, 196, 210, 166, 142, 68, 20, 197, 16, 225, 71, 143, 134, 29, 141, 204, 86, 203, 54, 227, 84, 37, 63, 58, 190, 47, 91, 235, 229, 147, 176, 123, 167, 4, 123, 170, 34, 196, 223, 19, 91, 112, 1 },
                            PasswordSalt = new byte[] { 209, 196, 105, 48, 129, 35, 16, 219, 192, 42, 75, 215, 187, 37, 161, 0, 104, 101, 200, 85, 153, 104, 167, 234, 243, 89, 130, 112, 67, 172, 202, 170, 168, 220, 26, 74, 140, 138, 215, 113, 11, 141, 160, 0, 36, 27, 225, 146, 21, 94, 66, 24, 153, 209, 220, 210, 198, 179, 101, 72, 160, 193, 33, 78, 207, 7, 236, 249, 205, 23, 131, 230, 98, 43, 124, 25, 68, 171, 180, 55, 230, 63, 207, 23, 170, 255, 170, 242, 57, 69, 52, 226, 135, 205, 157, 6, 21, 240, 234, 76, 29, 108, 11, 225, 191, 216, 115, 121, 205, 7, 215, 202, 248, 141, 88, 57, 77, 124, 160, 190, 55, 78, 142, 158, 223, 160, 94, 246 },
                            PhoneNumber = "01113436425",
                            Role = "Doctor",
                            UserName = "mohamed_hamdy",
                            DocDegree = "PHD",
                            DocSpecialization = "AI"
                        },
                        new
                        {
                            Id = 3,
                            Address = "fayoum",
                            Age = 50,
                            BloodType = "AB+",
                            CreatedDtm = new DateTime(2022, 6, 28, 20, 6, 50, 67, DateTimeKind.Local).AddTicks(1014),
                            DepartmentId = 2,
                            FirstName = "Amr",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "Refaat",
                            Mail = "amr.refaat@gmail.com",
                            NationalId = "27030351876321",
                            PasswordHash = new byte[] { 201, 184, 125, 86, 19, 141, 10, 97, 81, 175, 22, 181, 185, 158, 221, 7, 237, 133, 179, 159, 19, 200, 5, 53, 219, 89, 212, 97, 189, 129, 231, 104, 67, 19, 69, 99, 88, 55, 68, 172, 202, 105, 112, 153, 209, 131, 16, 128, 32, 127, 57, 47, 46, 22, 25, 113, 186, 75, 78, 253, 250, 208, 115, 164 },
                            PasswordSalt = new byte[] { 152, 150, 217, 195, 68, 203, 198, 18, 204, 151, 71, 238, 90, 96, 138, 221, 63, 147, 56, 155, 176, 136, 59, 255, 24, 184, 76, 215, 13, 127, 240, 130, 128, 228, 175, 26, 189, 241, 195, 217, 88, 113, 10, 240, 53, 86, 236, 28, 198, 195, 92, 153, 6, 110, 58, 231, 218, 80, 194, 208, 43, 211, 225, 203, 193, 211, 64, 113, 177, 253, 251, 24, 154, 205, 83, 63, 148, 88, 219, 236, 225, 40, 114, 78, 227, 245, 107, 218, 157, 5, 211, 87, 254, 221, 142, 145, 231, 255, 171, 198, 190, 105, 26, 98, 193, 156, 219, 204, 246, 169, 177, 57, 89, 188, 115, 20, 151, 24, 149, 106, 28, 252, 129, 67, 187, 22, 237, 95 },
                            PhoneNumber = "01113436425",
                            Role = "Doctor",
                            UserName = "amr_refaat",
                            DocDegree = "PHD",
                            DocSpecialization = "AI"
                        });
                });

            modelBuilder.Entity("Domain.Models.Users.Nurse", b =>
                {
                    b.HasBaseType("Domain.Models.Users.User");

                    b.Property<int?>("IndoorPatientRecordId")
                        .HasColumnType("int");

                    b.Property<string>("NurseDegree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NurseSpecialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("IndoorPatientRecordId");

                    b.HasDiscriminator().HasValue("Nurse");
                });

            modelBuilder.Entity("Domain.Models.Users.Patient", b =>
                {
                    b.HasBaseType("Domain.Models.Users.User");

                    b.HasIndex("DepartmentId");

                    b.HasDiscriminator().HasValue("Patient");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            Address = "fayoum",
                            Age = 40,
                            BloodType = "B+",
                            CreatedDtm = new DateTime(2022, 6, 28, 20, 6, 50, 67, DateTimeKind.Local).AddTicks(1143),
                            DepartmentId = 1,
                            FirstName = "Sayed",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "Taha",
                            Mail = "sayed.taha@gmail.com",
                            NationalId = "27030351876321",
                            PasswordHash = new byte[] { 96, 65, 171, 39, 176, 98, 22, 170, 114, 82, 67, 50, 227, 58, 225, 66, 10, 221, 247, 179, 205, 225, 5, 90, 233, 15, 187, 140, 227, 236, 25, 144, 162, 36, 19, 28, 164, 244, 227, 136, 215, 100, 19, 210, 99, 82, 2, 44, 158, 84, 176, 178, 239, 157, 173, 178, 231, 129, 161, 130, 130, 51, 188, 19 },
                            PasswordSalt = new byte[] { 5, 172, 150, 222, 56, 248, 137, 46, 84, 100, 31, 7, 217, 120, 189, 38, 33, 108, 109, 19, 127, 146, 158, 53, 129, 254, 217, 172, 195, 128, 51, 67, 33, 11, 86, 77, 74, 106, 211, 32, 96, 161, 42, 79, 91, 92, 154, 117, 228, 153, 172, 43, 250, 131, 53, 144, 12, 26, 146, 36, 103, 33, 230, 231, 27, 234, 165, 181, 158, 68, 7, 95, 213, 0, 41, 232, 164, 233, 177, 91, 7, 115, 246, 246, 135, 152, 209, 70, 147, 215, 58, 223, 194, 217, 13, 189, 215, 102, 129, 124, 248, 97, 163, 170, 164, 197, 251, 242, 201, 71, 133, 237, 187, 177, 136, 6, 183, 231, 20, 251, 214, 195, 250, 212, 224, 239, 114, 28 },
                            PhoneNumber = "01113436425",
                            Role = "Patient",
                            UserName = "patient1"
                        },
                        new
                        {
                            Id = 5,
                            Address = "fayoum",
                            Age = 37,
                            BloodType = "O+",
                            CreatedDtm = new DateTime(2022, 6, 28, 20, 6, 50, 67, DateTimeKind.Local).AddTicks(1146),
                            DepartmentId = 1,
                            FirstName = "Mohamed",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "Hamdy",
                            Mail = "mohamed.hamdy@gmail.com",
                            NationalId = "27030351876321",
                            PasswordHash = new byte[] { 191, 114, 97, 198, 219, 172, 217, 231, 138, 116, 59, 178, 108, 79, 178, 86, 104, 136, 73, 246, 21, 61, 149, 50, 245, 249, 251, 78, 155, 4, 180, 184, 36, 14, 185, 253, 217, 216, 84, 194, 158, 85, 128, 123, 105, 116, 155, 12, 213, 249, 116, 92, 122, 70, 46, 84, 70, 16, 40, 47, 176, 49, 153, 124 },
                            PasswordSalt = new byte[] { 99, 117, 254, 16, 100, 181, 52, 38, 188, 195, 186, 184, 165, 241, 151, 4, 231, 64, 195, 172, 134, 188, 107, 88, 170, 215, 167, 139, 189, 251, 45, 239, 62, 179, 49, 187, 23, 7, 56, 199, 190, 186, 104, 2, 5, 76, 162, 33, 179, 192, 239, 17, 189, 28, 236, 108, 61, 155, 105, 207, 45, 28, 119, 161, 204, 159, 220, 189, 15, 168, 237, 219, 14, 16, 224, 194, 174, 3, 100, 27, 24, 70, 242, 242, 82, 249, 129, 199, 69, 115, 48, 85, 149, 36, 157, 253, 125, 190, 157, 200, 10, 164, 250, 25, 101, 16, 127, 82, 229, 241, 13, 95, 114, 214, 143, 236, 128, 235, 177, 244, 184, 42, 67, 64, 38, 34, 15, 38 },
                            PhoneNumber = "01113436425",
                            Role = "Patient",
                            UserName = "patient2"
                        },
                        new
                        {
                            Id = 6,
                            Address = "fayoum",
                            Age = 50,
                            BloodType = "O-",
                            CreatedDtm = new DateTime(2022, 6, 28, 20, 6, 50, 67, DateTimeKind.Local).AddTicks(1149),
                            FirstName = "Amr",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "Refaat",
                            Mail = "amr.refaat@gmail.com",
                            NationalId = "27030351876321",
                            PasswordHash = new byte[] { 99, 63, 122, 213, 186, 49, 208, 253, 192, 236, 68, 52, 112, 253, 180, 24, 25, 223, 167, 79, 161, 33, 32, 77, 164, 250, 93, 118, 164, 110, 2, 108, 159, 58, 141, 118, 173, 70, 183, 213, 201, 90, 36, 209, 24, 59, 211, 12, 14, 207, 185, 112, 182, 65, 57, 191, 203, 135, 239, 202, 201, 63, 2, 37 },
                            PasswordSalt = new byte[] { 37, 216, 100, 33, 124, 219, 104, 107, 118, 235, 42, 127, 207, 208, 123, 17, 189, 95, 28, 208, 197, 128, 9, 220, 173, 106, 62, 205, 90, 105, 191, 243, 195, 38, 164, 239, 176, 206, 237, 176, 241, 58, 68, 98, 163, 106, 214, 137, 76, 6, 82, 107, 98, 13, 216, 166, 239, 45, 229, 140, 23, 169, 251, 130, 231, 35, 59, 109, 35, 226, 38, 196, 48, 226, 35, 152, 204, 206, 253, 162, 60, 218, 167, 127, 53, 138, 117, 71, 5, 154, 215, 217, 109, 136, 154, 45, 50, 155, 6, 73, 107, 223, 125, 236, 160, 22, 130, 8, 100, 26, 13, 2, 25, 144, 35, 6, 133, 104, 61, 127, 157, 146, 109, 139, 228, 124, 225, 95 },
                            PhoneNumber = "01113436425",
                            Role = "Patient",
                            UserName = "patient3"
                        });
                });

            modelBuilder.Entity("Domain.Models.Users.Receptionist", b =>
                {
                    b.HasBaseType("Domain.Models.Users.User");

                    b.HasIndex("DepartmentId");

                    b.HasDiscriminator().HasValue("Receptionist");
                });

            modelBuilder.Entity("Domain.Models.Appointment", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Models.Bed", b =>
                {
                    b.HasOne("Domain.Models.Room", "Room")
                        .WithMany("Beds")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Domain.Models.ClinicPatientRecord", b =>
                {
                    b.HasOne("Domain.Models.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.Patient", null)
                        .WithMany("ClinicPatientRecord")
                        .HasForeignKey("PatientId");

                    b.HasOne("Domain.Models.Prescription", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Department");

                    b.Navigation("Doctor");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("Domain.Models.IndoorPatientRecord", b =>
                {
                    b.HasOne("Domain.Models.Bed", "Bed")
                        .WithMany()
                        .HasForeignKey("BedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.Doctor", "OrderdByDoctor")
                        .WithMany()
                        .HasForeignKey("OrderdByDoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.Patient", "Patient")
                        .WithMany("IndoorPatientRecord")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bed");

                    b.Navigation("Department");

                    b.Navigation("OrderdByDoctor");

                    b.Navigation("Patient");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Domain.Models.Labs.LabRequest", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", "IndoorPatientRecord")
                        .WithMany()
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Labs.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("IndoorPatientRecord");

                    b.Navigation("Patient");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Domain.Models.Labs.PatientScan", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", "IndoorPatientRecord")
                        .WithMany("Scans")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Labs.Scan", "Scan")
                        .WithMany()
                        .HasForeignKey("ScanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("IndoorPatientRecord");

                    b.Navigation("Patient");

                    b.Navigation("Scan");
                });

            modelBuilder.Entity("Domain.Models.Labs.PatientTest", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", "IndoorPatientRecord")
                        .WithMany("Tests")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Labs.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("IndoorPatientRecord");

                    b.Navigation("Patient");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Domain.Models.Labs.ScanRequest", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", "IndoorPatientRecord")
                        .WithMany()
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Labs.Scan", "Scan")
                        .WithMany()
                        .HasForeignKey("ScanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("IndoorPatientRecord");

                    b.Navigation("Patient");

                    b.Navigation("Scan");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestDetails", b =>
                {
                    b.HasOne("Domain.Models.Labs.TestParameter", "TestParameter")
                        .WithMany()
                        .HasForeignKey("TestParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestParameter");
                });

            modelBuilder.Entity("Domain.Models.Note", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", null)
                        .WithMany("Notes")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Users.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId");

                    b.Navigation("Doctor");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("Domain.Models.Prescription", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.IndoorPatientRecord", null)
                        .WithMany("Prescriptions")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Users.Patient", "patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("patient");
                });

            modelBuilder.Entity("Domain.Models.PrescriptionItem", b =>
                {
                    b.HasOne("Domain.Models.Prescription", null)
                        .WithMany("PrescriptionItems")
                        .HasForeignKey("PrescriptionId");
                });

            modelBuilder.Entity("Domain.Models.Room", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.Schedule", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Domain.Models.TimeSlot", b =>
                {
                    b.HasOne("Domain.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Domain.Models.VitalSign", b =>
                {
                    b.HasOne("Domain.Models.IndoorPatientRecord", null)
                        .WithMany("VitalSigns")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.HasOne("Domain.Models.Note", "Note")
                        .WithMany()
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("Patientid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");

                    b.Navigation("Nurse");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestDetailsCategorical", b =>
                {
                    b.HasOne("Domain.Models.Labs.PatientTest", "PatientTest")
                        .WithMany("CategoricalDetails")
                        .HasForeignKey("PatientTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientTest");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestDetailsNumerical", b =>
                {
                    b.HasOne("Domain.Models.Labs.PatientTest", "PatientTest")
                        .WithMany("NumericalDetails")
                        .HasForeignKey("PatientTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientTest");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestParameterCategorical", b =>
                {
                    b.HasOne("Domain.Models.Labs.Test", "Test")
                        .WithMany("CategoricalParamters")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Domain.Models.Labs.TestParameterNumerical", b =>
                {
                    b.HasOne("Domain.Models.Labs.Test", "Test")
                        .WithMany("NumericalParamters")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Domain.Models.Users.Admin", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.Users.Doctor", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany("Doctors")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", null)
                        .WithMany("Doctors")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.Users.Nurse", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany("Nurses")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Domain.Models.IndoorPatientRecord", null)
                        .WithMany("Nurses")
                        .HasForeignKey("IndoorPatientRecordId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.Users.Patient", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany("Patients")
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.Users.Receptionist", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.Department", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Nurses");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Domain.Models.IndoorPatientRecord", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Notes");

                    b.Navigation("Nurses");

                    b.Navigation("Prescriptions");

                    b.Navigation("Scans");

                    b.Navigation("Tests");

                    b.Navigation("VitalSigns");
                });

            modelBuilder.Entity("Domain.Models.Labs.PatientTest", b =>
                {
                    b.Navigation("CategoricalDetails");

                    b.Navigation("NumericalDetails");
                });

            modelBuilder.Entity("Domain.Models.Labs.Test", b =>
                {
                    b.Navigation("CategoricalParamters");

                    b.Navigation("NumericalParamters");
                });

            modelBuilder.Entity("Domain.Models.Prescription", b =>
                {
                    b.Navigation("PrescriptionItems");
                });

            modelBuilder.Entity("Domain.Models.Room", b =>
                {
                    b.Navigation("Beds");
                });

            modelBuilder.Entity("Domain.Models.Users.Patient", b =>
                {
                    b.Navigation("ClinicPatientRecord");

                    b.Navigation("IndoorPatientRecord");
                });
#pragma warning restore 612, 618
        }
    }
}
